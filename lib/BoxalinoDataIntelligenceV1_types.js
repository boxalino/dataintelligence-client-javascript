//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


DataIntelligenceServiceExceptionNumber = {
  'GENERAL_EXCEPTION' : 1,
  'INVALID_CREDENTIALS' : 2,
  'BLOCKED_USER' : 3,
  'BLOCKED_ACCOUNT' : 4,
  'INVALID_AUTHENTICATION_TOKEN' : 5,
  'INVALID_NEW_PASSWORD' : 6,
  'INVALID_CONFIGURATION_VERSION' : 7,
  'INVALID_DATASOURCE' : 8,
  'NON_EXISTING_CONTENT_ID' : 9,
  'ALREADY_EXISTING_CONTENT_ID' : 10,
  'INVALID_CONTENT_ID' : 11,
  'INVALID_CONTENT' : 12,
  'INVALID_LANGUAGE' : 13,
  'DUPLICATED_FILE_ID' : 14,
  'EMPTY_COLUMNS_LIST' : 15,
  'NON_EXISTING_FILE' : 16,
  'INVALID_RANGE' : 17,
  'INVALID_REPORT_REQUEST' : 18
};
ConfigurationVersionType = {
  'CURRENT_DEVELOPMENT_VERSION' : 1,
  'CURRENT_PRODUCTION_VERSION' : 2
};
Language = {
  'GERMAN' : 1,
  'FRENCH' : 2,
  'ENGLISH' : 3,
  'ITALIAN' : 4,
  'SPANISH' : 5,
  'DUTCH' : 6,
  'PORTUGUESE' : 7,
  'SWEDISH' : 8,
  'ARABIC' : 9,
  'RUSSIAN' : 10,
  'JAPANESE' : 11,
  'KOREAN' : 12,
  'TURKISH' : 13,
  'VIETNAMESE' : 14,
  'POLISH' : 15,
  'UKRAINIAN' : 16,
  'CHINESE_MANDARIN' : 17,
  'OTHER' : 100
};
ProcessTaskExecutionStatusType = {
  'WAITING' : 1,
  'STARTED' : 2,
  'FINISHED_SUCCESS' : 3,
  'FINISHED_WITH_WARNINGS' : 4,
  'FAILED' : 5,
  'ABORTED' : 6
};
CSVFileColumnType = {
  'STRING' : 1,
  'INTEGER' : 2,
  'DOUBLE' : 3,
  'DATETIME' : 4,
  'DATE' : 5,
  'TIME' : 6,
  'UNIX_TIMESTAMP' : 7
};
TimeRangePrecision = {
  'DAY' : 1,
  'WEEK' : 2,
  'MONTH' : 3,
  'QUARTER' : 4,
  'YEAR' : 5,
  'ALL' : 6
};
ReportMetricType = {
  'VISITORS' : 1,
  'VISITS' : 2,
  'BOUNCES' : 3,
  'BOUNCE_RATE' : 4,
  'PAGE_VIEWS' : 5,
  'PAGE_VIEWS_PER_VISIT' : 6,
  'TIME_ON_SITE' : 31,
  'AVERAGE_TIME_ON_SITE' : 7,
  'PRODUCT_VIEWS' : 8,
  'PRODUCT_VIEWS_PER_VISIT' : 9,
  'VISITS_WITH_PRODUCT_VIEWS' : 10,
  'VISITS_WITH_PRODUCT_VIEWS_RATE' : 11,
  'SEARCHES' : 12,
  'SEARCHES_PER_VISIT' : 13,
  'VISITS_WITH_SEARCHES' : 14,
  'VISITS_WITH_SEARCHES_RATE' : 15,
  'GOALS' : 16,
  'GOALS_PER_VISIT' : 17,
  'VISITS_WITH_GOALS' : 18,
  'VISITS_WITH_GOALS_RATE' : 19,
  'TRANSACTIONS' : 20,
  'TRANSACTIONS_PER_VISIT' : 21,
  'VISITS_WITH_TRANSACTIONS' : 22,
  'VISITS_WITH_TRANSACTIONS_RATE' : 23,
  'TRANSACTIONS_TURNOVER' : 28,
  'TRANSACTIONS_PARAMETER_SUM' : 29,
  'TRANSACTIONS_QUANTITY' : 30,
  'TRANSACTIONS_CUSTOMERS' : 32,
  'ADD_TO_BASKETS' : 24,
  'ADD_TO_BASKETS_PER_VISIT' : 25,
  'VISITS_WITH_ADD_TO_BASKETS' : 26,
  'VISITS_WITH_ADD_TO_BASKETS_RATE' : 27,
  'EVENT_COUNT' : 40,
  'MAIL_SENT' : 50,
  'MAIL_OPENED' : 51,
  'MAIL_CLICKED' : 52,
  'CHOICE_DISPLAYS' : 100,
  'CHOICE_DISPLAYS_PER_VISIT' : 101,
  'VISITS_WITH_CHOICE_DISPLAYS' : 102,
  'VISITS_WITH_CHOICE_DISPLAYS_RATE' : 103,
  'PRODUCT_VIEWS_FROM_CHOICE_DISPLAY' : 110,
  'PRODUCT_VIEWS_FROM_CHOICE_DISPLAY_PER_VISIT' : 111,
  'VISITS_WITH_PRODUCT_VIEWS_FROM_CHOICE_DISPLAY' : 112,
  'VISITS_WITH_PRODUCT_VIEWS_FROM_CHOICE_DISPLAY_RATE' : 113,
  'TRANSACTIONS_FROM_CHOICE_DISPLAY' : 120,
  'TRANSACTIONS_FROM_CHOICE_DISPLAY_PER_VISIT' : 121,
  'TRANSACTIONS_PARAMETER_SUM_FROM_CHOICE_DISPLAY' : 122,
  'TRANSACTIONS_PARAMETER_SUM_FROM_CHOICE_DISPLAY_PER_VISIT' : 123,
  'VISITS_WITH_TRANSACTIONS_FROM_CHOICE_DISPLAY' : 130,
  'VISITS_WITH_TRANSACTIONS_FROM_CHOICE_DISPLAY_RATE' : 131,
  'ADD_TO_BASKETS_FROM_CHOICE_DISPLAY' : 132,
  'ADD_TO_BASKETS_FROM_CHOICE_DISPLAY_PER_VISIT' : 133,
  'VISITS_WITH_ADD_TO_BASKETS_FROM_CHOICE_DISPLAY' : 134,
  'VISITS_WITH_ADD_TO_BASKETS_FROM_CHOICE_DISPLAY_RATE' : 135,
  'GOALS_FROM_CHOICE_DISPLAY' : 140,
  'GOALS_FROM_CHOICE_DISPLAY_PER_VISIT' : 141,
  'VISITS_WITH_GOALS_FROM_CHOICE_DISPLAY' : 142,
  'VISITS_WITH_GOALS_FROM_CHOICE_DISPLAY_RATE' : 143
};
ReportDimensionType = {
  'NEW_VISITOR' : 1,
  'GEO_COUNTRY' : 2,
  'GEO_ZIP' : 3,
  'GEO_SUBDIVISION' : 10,
  'GEO_CITY' : 4,
  'BROWSER_NAME' : 11,
  'BROWSER_VERSION' : 5,
  'OPERATING_SYSTEM' : 6,
  'DEVICE_CATEGORY' : 7,
  'ADWORDS_CREATIVE' : 8,
  'ADWORDS_KEYWORD' : 9,
  'ONSITE_SEARCH_QUERY' : 15,
  'HOUR_OF_DAY' : 20,
  'MOMENT_OF_DAY' : 21,
  'DAY_OF_WEEK' : 22,
  'MOMENT_OF_WEEK' : 23,
  'SESSION_START_TIMESTAMP' : 24,
  'SESSION_ID' : 25,
  'INTERNAL_SESSION_ID' : 26,
  'VISITOR_ID' : 27,
  'INTERNAL_VISITOR_ID' : 28,
  'PAGE_VIEW_URL' : 29,
  'URL_PARAMETER' : 50,
  'TRANSACTION_PROPERTY' : 100,
  'CUSTOMER_PROPERTY' : 150,
  'PURCHASED_PRODUCT_PROPERTY' : 200,
  'PRODUCT_PROPERTY' : 201,
  'CHOICE' : 300,
  'CHOICE_VARIANT' : 301,
  'COHORT_INDEX' : 1000
};
ConditionOperator = {
  'IS' : 1,
  'IS_NOT' : 2,
  'IS_GREATER' : 3,
  'IS_GREATER_OR_EQUAL' : 4,
  'IS_SMALLER' : 5,
  'IS_SMALLER_OR_EQUAL' : 6,
  'CONTAINS' : 7,
  'DOES_NOT_CONTAIN' : 8,
  'STARTS_WITH' : 9,
  'DOES_NOT_START_WITH' : 10,
  'ENDS_WITH' : 11,
  'DOES_NOT_END_WITH' : 12
};
ReportResultTimeRangeType = {
  'REAL_TIME' : 1,
  'COHORT' : 2
};
DataIntelligenceServiceException = function(args) {
  this.exceptionNumber = null;
  this.message = null;
  if (args) {
    if (args.exceptionNumber !== undefined) {
      this.exceptionNumber = args.exceptionNumber;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field exceptionNumber is unset!');
    }
    if (args.message !== undefined) {
      this.message = args.message;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field message is unset!');
    }
  }
};
Thrift.inherits(DataIntelligenceServiceException, Thrift.TException);
DataIntelligenceServiceException.prototype.name = 'DataIntelligenceServiceException';
DataIntelligenceServiceException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.exceptionNumber = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataIntelligenceServiceException.prototype.write = function(output) {
  output.writeStructBegin('DataIntelligenceServiceException');
  if (this.exceptionNumber !== null && this.exceptionNumber !== undefined) {
    output.writeFieldBegin('exceptionNumber', Thrift.Type.I32, 1);
    output.writeI32(this.exceptionNumber);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AuthenticationRequest = function(args) {
  this.account = null;
  this.username = null;
  this.password = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field account is unset!');
    }
    if (args.username !== undefined) {
      this.username = args.username;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field username is unset!');
    }
    if (args.password !== undefined) {
      this.password = args.password;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field password is unset!');
    }
  }
};
AuthenticationRequest.prototype = {};
AuthenticationRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.account = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthenticationRequest.prototype.write = function(output) {
  output.writeStructBegin('AuthenticationRequest');
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRING, 1);
    output.writeString(this.account);
    output.writeFieldEnd();
  }
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 2);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 3);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Authentication = function(args) {
  this.authenticationToken = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field authenticationToken is unset!');
    }
  }
};
Authentication.prototype = {};
Authentication.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Authentication.prototype.write = function(output) {
  output.writeStructBegin('Authentication');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ConfigurationVersion = function(args) {
  this.configurationVersionNumber = null;
  this.systemParameters = null;
  if (args) {
    if (args.configurationVersionNumber !== undefined) {
      this.configurationVersionNumber = args.configurationVersionNumber;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field configurationVersionNumber is unset!');
    }
    if (args.systemParameters !== undefined) {
      this.systemParameters = args.systemParameters;
    }
  }
};
ConfigurationVersion.prototype = {};
ConfigurationVersion.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I16) {
        this.configurationVersionNumber = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.systemParameters = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          if (_i5 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key6 = null;
          var val7 = null;
          key6 = input.readString().value;
          val7 = input.readString().value;
          this.systemParameters[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ConfigurationVersion.prototype.write = function(output) {
  output.writeStructBegin('ConfigurationVersion');
  if (this.configurationVersionNumber !== null && this.configurationVersionNumber !== undefined) {
    output.writeFieldBegin('configurationVersionNumber', Thrift.Type.I16, 1);
    output.writeI16(this.configurationVersionNumber);
    output.writeFieldEnd();
  }
  if (this.systemParameters !== null && this.systemParameters !== undefined) {
    output.writeFieldBegin('systemParameters', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.systemParameters));
    for (var kiter8 in this.systemParameters)
    {
      if (this.systemParameters.hasOwnProperty(kiter8))
      {
        var viter9 = this.systemParameters[kiter8];
        output.writeString(kiter8);
        output.writeString(viter9);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ConfigurationDifference = function(args) {
  this.contentType = null;
  this.contentId = null;
  this.parameterName = null;
  this.contentSource = null;
  this.contentDestination = null;
  if (args) {
    if (args.contentType !== undefined) {
      this.contentType = args.contentType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field contentType is unset!');
    }
    if (args.contentId !== undefined) {
      this.contentId = args.contentId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field contentId is unset!');
    }
    if (args.parameterName !== undefined) {
      this.parameterName = args.parameterName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field parameterName is unset!');
    }
    if (args.contentSource !== undefined) {
      this.contentSource = args.contentSource;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field contentSource is unset!');
    }
    if (args.contentDestination !== undefined) {
      this.contentDestination = args.contentDestination;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field contentDestination is unset!');
    }
  }
};
ConfigurationDifference.prototype = {};
ConfigurationDifference.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.contentType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.contentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.parameterName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.contentSource = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.contentDestination = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ConfigurationDifference.prototype.write = function(output) {
  output.writeStructBegin('ConfigurationDifference');
  if (this.contentType !== null && this.contentType !== undefined) {
    output.writeFieldBegin('contentType', Thrift.Type.STRING, 1);
    output.writeString(this.contentType);
    output.writeFieldEnd();
  }
  if (this.contentId !== null && this.contentId !== undefined) {
    output.writeFieldBegin('contentId', Thrift.Type.STRING, 2);
    output.writeString(this.contentId);
    output.writeFieldEnd();
  }
  if (this.parameterName !== null && this.parameterName !== undefined) {
    output.writeFieldBegin('parameterName', Thrift.Type.STRING, 3);
    output.writeString(this.parameterName);
    output.writeFieldEnd();
  }
  if (this.contentSource !== null && this.contentSource !== undefined) {
    output.writeFieldBegin('contentSource', Thrift.Type.STRING, 4);
    output.writeString(this.contentSource);
    output.writeFieldEnd();
  }
  if (this.contentDestination !== null && this.contentDestination !== undefined) {
    output.writeFieldBegin('contentDestination', Thrift.Type.STRING, 5);
    output.writeString(this.contentDestination);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Field = function(args) {
  this.fieldId = null;
  if (args) {
    if (args.fieldId !== undefined) {
      this.fieldId = args.fieldId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field fieldId is unset!');
    }
  }
};
Field.prototype = {};
Field.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fieldId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Field.prototype.write = function(output) {
  output.writeStructBegin('Field');
  if (this.fieldId !== null && this.fieldId !== undefined) {
    output.writeFieldBegin('fieldId', Thrift.Type.STRING, 1);
    output.writeString(this.fieldId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProcessTask = function(args) {
  this.processTaskId = null;
  if (args) {
    if (args.processTaskId !== undefined) {
      this.processTaskId = args.processTaskId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field processTaskId is unset!');
    }
  }
};
ProcessTask.prototype = {};
ProcessTask.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.processTaskId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProcessTask.prototype.write = function(output) {
  output.writeStructBegin('ProcessTask');
  if (this.processTaskId !== null && this.processTaskId !== undefined) {
    output.writeFieldBegin('processTaskId', Thrift.Type.STRING, 1);
    output.writeString(this.processTaskId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataSyncProcessTask = function(args) {
  this.processTaskId = null;
  this.inputs = null;
  this.outputs = null;
  this.dev = false;
  this.delta = false;
  if (args) {
    if (args.processTaskId !== undefined) {
      this.processTaskId = args.processTaskId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field processTaskId is unset!');
    }
    if (args.inputs !== undefined) {
      this.inputs = args.inputs;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field inputs is unset!');
    }
    if (args.outputs !== undefined) {
      this.outputs = args.outputs;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field outputs is unset!');
    }
    if (args.dev !== undefined) {
      this.dev = args.dev;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field dev is unset!');
    }
    if (args.delta !== undefined) {
      this.delta = args.delta;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field delta is unset!');
    }
  }
};
DataSyncProcessTask.prototype = {};
DataSyncProcessTask.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.processTaskId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size10 = 0;
        var _rtmp314;
        this.inputs = [];
        var _etype13 = 0;
        _rtmp314 = input.readListBegin();
        _etype13 = _rtmp314.etype;
        _size10 = _rtmp314.size;
        for (var _i15 = 0; _i15 < _size10; ++_i15)
        {
          var elem16 = null;
          elem16 = new DataSource();
          elem16.read(input);
          this.inputs.push(elem16);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size17 = 0;
        var _rtmp321;
        this.outputs = [];
        var _etype20 = 0;
        _rtmp321 = input.readListBegin();
        _etype20 = _rtmp321.etype;
        _size17 = _rtmp321.size;
        for (var _i22 = 0; _i22 < _size17; ++_i22)
        {
          var elem23 = null;
          elem23 = new DataExport();
          elem23.read(input);
          this.outputs.push(elem23);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.dev = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.delta = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataSyncProcessTask.prototype.write = function(output) {
  output.writeStructBegin('DataSyncProcessTask');
  if (this.processTaskId !== null && this.processTaskId !== undefined) {
    output.writeFieldBegin('processTaskId', Thrift.Type.STRING, 1);
    output.writeString(this.processTaskId);
    output.writeFieldEnd();
  }
  if (this.inputs !== null && this.inputs !== undefined) {
    output.writeFieldBegin('inputs', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.inputs.length);
    for (var iter24 in this.inputs)
    {
      if (this.inputs.hasOwnProperty(iter24))
      {
        iter24 = this.inputs[iter24];
        iter24.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.outputs !== null && this.outputs !== undefined) {
    output.writeFieldBegin('outputs', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.outputs.length);
    for (var iter25 in this.outputs)
    {
      if (this.outputs.hasOwnProperty(iter25))
      {
        iter25 = this.outputs[iter25];
        iter25.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.dev !== null && this.dev !== undefined) {
    output.writeFieldBegin('dev', Thrift.Type.BOOL, 4);
    output.writeBool(this.dev);
    output.writeFieldEnd();
  }
  if (this.delta !== null && this.delta !== undefined) {
    output.writeFieldBegin('delta', Thrift.Type.BOOL, 5);
    output.writeBool(this.delta);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Scheduling = function(args) {
  this.schedulingId = null;
  if (args) {
    if (args.schedulingId !== undefined) {
      this.schedulingId = args.schedulingId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field schedulingId is unset!');
    }
  }
};
Scheduling.prototype = {};
Scheduling.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.schedulingId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Scheduling.prototype.write = function(output) {
  output.writeStructBegin('Scheduling');
  if (this.schedulingId !== null && this.schedulingId !== undefined) {
    output.writeFieldBegin('schedulingId', Thrift.Type.STRING, 1);
    output.writeString(this.schedulingId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RecommendationBlock = function(args) {
  this.recommendationBlockId = null;
  if (args) {
    if (args.recommendationBlockId !== undefined) {
      this.recommendationBlockId = args.recommendationBlockId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field recommendationBlockId is unset!');
    }
  }
};
RecommendationBlock.prototype = {};
RecommendationBlock.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.recommendationBlockId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RecommendationBlock.prototype.write = function(output) {
  output.writeStructBegin('RecommendationBlock');
  if (this.recommendationBlockId !== null && this.recommendationBlockId !== undefined) {
    output.writeFieldBegin('recommendationBlockId', Thrift.Type.STRING, 1);
    output.writeString(this.recommendationBlockId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataSource = function(args) {
  this.dataSourceId = null;
  if (args) {
    if (args.dataSourceId !== undefined) {
      this.dataSourceId = args.dataSourceId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field dataSourceId is unset!');
    }
  }
};
DataSource.prototype = {};
DataSource.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dataSourceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataSource.prototype.write = function(output) {
  output.writeStructBegin('DataSource');
  if (this.dataSourceId !== null && this.dataSourceId !== undefined) {
    output.writeFieldBegin('dataSourceId', Thrift.Type.STRING, 1);
    output.writeString(this.dataSourceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReferenceCSVDataSource = function(args) {
  this.dataSourceId = null;
  this.extendedDataSourceId = null;
  if (args) {
    if (args.dataSourceId !== undefined) {
      this.dataSourceId = args.dataSourceId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field dataSourceId is unset!');
    }
    if (args.extendedDataSourceId !== undefined) {
      this.extendedDataSourceId = args.extendedDataSourceId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field extendedDataSourceId is unset!');
    }
  }
};
ReferenceCSVDataSource.prototype = {};
ReferenceCSVDataSource.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dataSourceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.extendedDataSourceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReferenceCSVDataSource.prototype.write = function(output) {
  output.writeStructBegin('ReferenceCSVDataSource');
  if (this.dataSourceId !== null && this.dataSourceId !== undefined) {
    output.writeFieldBegin('dataSourceId', Thrift.Type.STRING, 1);
    output.writeString(this.dataSourceId);
    output.writeFieldEnd();
  }
  if (this.extendedDataSourceId !== null && this.extendedDataSourceId !== undefined) {
    output.writeFieldBegin('extendedDataSourceId', Thrift.Type.STRING, 2);
    output.writeString(this.extendedDataSourceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataExport = function(args) {
  this.dataExportId = null;
  if (args) {
    if (args.dataExportId !== undefined) {
      this.dataExportId = args.dataExportId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field dataExportId is unset!');
    }
  }
};
DataExport.prototype = {};
DataExport.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dataExportId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataExport.prototype.write = function(output) {
  output.writeStructBegin('DataExport');
  if (this.dataExportId !== null && this.dataExportId !== undefined) {
    output.writeFieldBegin('dataExportId', Thrift.Type.STRING, 1);
    output.writeString(this.dataExportId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EmailCampaign = function(args) {
  this.emailCampaignId = null;
  this.cmpid = null;
  this.dateTime = null;
  this.baseUrl = null;
  this.subject = null;
  this.firstSentence = null;
  this.legals = null;
  if (args) {
    if (args.emailCampaignId !== undefined) {
      this.emailCampaignId = args.emailCampaignId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field emailCampaignId is unset!');
    }
    if (args.cmpid !== undefined) {
      this.cmpid = args.cmpid;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field cmpid is unset!');
    }
    if (args.dateTime !== undefined) {
      this.dateTime = args.dateTime;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field dateTime is unset!');
    }
    if (args.baseUrl !== undefined) {
      this.baseUrl = args.baseUrl;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field baseUrl is unset!');
    }
    if (args.subject !== undefined) {
      this.subject = args.subject;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field subject is unset!');
    }
    if (args.firstSentence !== undefined) {
      this.firstSentence = args.firstSentence;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field firstSentence is unset!');
    }
    if (args.legals !== undefined) {
      this.legals = args.legals;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field legals is unset!');
    }
  }
};
EmailCampaign.prototype = {};
EmailCampaign.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.emailCampaignId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.cmpid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.dateTime = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size26 = 0;
        var _rtmp330;
        this.baseUrl = {};
        var _ktype27 = 0;
        var _vtype28 = 0;
        _rtmp330 = input.readMapBegin();
        _ktype27 = _rtmp330.ktype;
        _vtype28 = _rtmp330.vtype;
        _size26 = _rtmp330.size;
        for (var _i31 = 0; _i31 < _size26; ++_i31)
        {
          if (_i31 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key32 = null;
          var val33 = null;
          key32 = input.readI32().value;
          val33 = input.readString().value;
          this.baseUrl[key32] = val33;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size34 = 0;
        var _rtmp338;
        this.subject = {};
        var _ktype35 = 0;
        var _vtype36 = 0;
        _rtmp338 = input.readMapBegin();
        _ktype35 = _rtmp338.ktype;
        _vtype36 = _rtmp338.vtype;
        _size34 = _rtmp338.size;
        for (var _i39 = 0; _i39 < _size34; ++_i39)
        {
          if (_i39 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key40 = null;
          var val41 = null;
          key40 = input.readI32().value;
          val41 = input.readString().value;
          this.subject[key40] = val41;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.MAP) {
        var _size42 = 0;
        var _rtmp346;
        this.firstSentence = {};
        var _ktype43 = 0;
        var _vtype44 = 0;
        _rtmp346 = input.readMapBegin();
        _ktype43 = _rtmp346.ktype;
        _vtype44 = _rtmp346.vtype;
        _size42 = _rtmp346.size;
        for (var _i47 = 0; _i47 < _size42; ++_i47)
        {
          if (_i47 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key48 = null;
          var val49 = null;
          key48 = input.readI32().value;
          val49 = input.readString().value;
          this.firstSentence[key48] = val49;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.MAP) {
        var _size50 = 0;
        var _rtmp354;
        this.legals = {};
        var _ktype51 = 0;
        var _vtype52 = 0;
        _rtmp354 = input.readMapBegin();
        _ktype51 = _rtmp354.ktype;
        _vtype52 = _rtmp354.vtype;
        _size50 = _rtmp354.size;
        for (var _i55 = 0; _i55 < _size50; ++_i55)
        {
          if (_i55 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key56 = null;
          var val57 = null;
          key56 = input.readI32().value;
          val57 = input.readString().value;
          this.legals[key56] = val57;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EmailCampaign.prototype.write = function(output) {
  output.writeStructBegin('EmailCampaign');
  if (this.emailCampaignId !== null && this.emailCampaignId !== undefined) {
    output.writeFieldBegin('emailCampaignId', Thrift.Type.STRING, 1);
    output.writeString(this.emailCampaignId);
    output.writeFieldEnd();
  }
  if (this.cmpid !== null && this.cmpid !== undefined) {
    output.writeFieldBegin('cmpid', Thrift.Type.STRING, 2);
    output.writeString(this.cmpid);
    output.writeFieldEnd();
  }
  if (this.dateTime !== null && this.dateTime !== undefined) {
    output.writeFieldBegin('dateTime', Thrift.Type.STRING, 3);
    output.writeString(this.dateTime);
    output.writeFieldEnd();
  }
  if (this.baseUrl !== null && this.baseUrl !== undefined) {
    output.writeFieldBegin('baseUrl', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRING, Thrift.objectLength(this.baseUrl));
    for (var kiter58 in this.baseUrl)
    {
      if (this.baseUrl.hasOwnProperty(kiter58))
      {
        var viter59 = this.baseUrl[kiter58];
        output.writeI32(kiter58);
        output.writeString(viter59);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.subject !== null && this.subject !== undefined) {
    output.writeFieldBegin('subject', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRING, Thrift.objectLength(this.subject));
    for (var kiter60 in this.subject)
    {
      if (this.subject.hasOwnProperty(kiter60))
      {
        var viter61 = this.subject[kiter60];
        output.writeI32(kiter60);
        output.writeString(viter61);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.firstSentence !== null && this.firstSentence !== undefined) {
    output.writeFieldBegin('firstSentence', Thrift.Type.MAP, 6);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRING, Thrift.objectLength(this.firstSentence));
    for (var kiter62 in this.firstSentence)
    {
      if (this.firstSentence.hasOwnProperty(kiter62))
      {
        var viter63 = this.firstSentence[kiter62];
        output.writeI32(kiter62);
        output.writeString(viter63);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.legals !== null && this.legals !== undefined) {
    output.writeFieldBegin('legals', Thrift.Type.MAP, 7);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRING, Thrift.objectLength(this.legals));
    for (var kiter64 in this.legals)
    {
      if (this.legals.hasOwnProperty(kiter64))
      {
        var viter65 = this.legals[kiter64];
        output.writeI32(kiter64);
        output.writeString(viter65);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Choice = function(args) {
  this.choiceId = null;
  if (args) {
    if (args.choiceId !== undefined) {
      this.choiceId = args.choiceId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field choiceId is unset!');
    }
  }
};
Choice.prototype = {};
Choice.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.choiceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Choice.prototype.write = function(output) {
  output.writeStructBegin('Choice');
  if (this.choiceId !== null && this.choiceId !== undefined) {
    output.writeFieldBegin('choiceId', Thrift.Type.STRING, 1);
    output.writeString(this.choiceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChoiceVariant = function(args) {
  this.choiceVariantId = null;
  this.choiceId = null;
  this.tags = null;
  this.simpleParameters = null;
  this.localizedParemeters = null;
  if (args) {
    if (args.choiceVariantId !== undefined) {
      this.choiceVariantId = args.choiceVariantId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field choiceVariantId is unset!');
    }
    if (args.choiceId !== undefined) {
      this.choiceId = args.choiceId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field choiceId is unset!');
    }
    if (args.tags !== undefined) {
      this.tags = args.tags;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tags is unset!');
    }
    if (args.simpleParameters !== undefined) {
      this.simpleParameters = args.simpleParameters;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field simpleParameters is unset!');
    }
    if (args.localizedParemeters !== undefined) {
      this.localizedParemeters = args.localizedParemeters;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field localizedParemeters is unset!');
    }
  }
};
ChoiceVariant.prototype = {};
ChoiceVariant.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.choiceVariantId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.choiceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size66 = 0;
        var _rtmp370;
        this.tags = [];
        var _etype69 = 0;
        _rtmp370 = input.readListBegin();
        _etype69 = _rtmp370.etype;
        _size66 = _rtmp370.size;
        for (var _i71 = 0; _i71 < _size66; ++_i71)
        {
          var elem72 = null;
          elem72 = input.readString().value;
          this.tags.push(elem72);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size73 = 0;
        var _rtmp377;
        this.simpleParameters = {};
        var _ktype74 = 0;
        var _vtype75 = 0;
        _rtmp377 = input.readMapBegin();
        _ktype74 = _rtmp377.ktype;
        _vtype75 = _rtmp377.vtype;
        _size73 = _rtmp377.size;
        for (var _i78 = 0; _i78 < _size73; ++_i78)
        {
          if (_i78 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key79 = null;
          var val80 = null;
          key79 = input.readString().value;
          var _size81 = 0;
          var _rtmp385;
          val80 = [];
          var _etype84 = 0;
          _rtmp385 = input.readListBegin();
          _etype84 = _rtmp385.etype;
          _size81 = _rtmp385.size;
          for (var _i86 = 0; _i86 < _size81; ++_i86)
          {
            var elem87 = null;
            elem87 = input.readString().value;
            val80.push(elem87);
          }
          input.readListEnd();
          this.simpleParameters[key79] = val80;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size88 = 0;
        var _rtmp392;
        this.localizedParemeters = {};
        var _ktype89 = 0;
        var _vtype90 = 0;
        _rtmp392 = input.readMapBegin();
        _ktype89 = _rtmp392.ktype;
        _vtype90 = _rtmp392.vtype;
        _size88 = _rtmp392.size;
        for (var _i93 = 0; _i93 < _size88; ++_i93)
        {
          if (_i93 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key94 = null;
          var val95 = null;
          key94 = input.readString().value;
          var _size96 = 0;
          var _rtmp3100;
          val95 = [];
          var _etype99 = 0;
          _rtmp3100 = input.readListBegin();
          _etype99 = _rtmp3100.etype;
          _size96 = _rtmp3100.size;
          for (var _i101 = 0; _i101 < _size96; ++_i101)
          {
            var elem102 = null;
            var _size103 = 0;
            var _rtmp3107;
            elem102 = {};
            var _ktype104 = 0;
            var _vtype105 = 0;
            _rtmp3107 = input.readMapBegin();
            _ktype104 = _rtmp3107.ktype;
            _vtype105 = _rtmp3107.vtype;
            _size103 = _rtmp3107.size;
            for (var _i108 = 0; _i108 < _size103; ++_i108)
            {
              if (_i108 > 0 ) {
                if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
                  input.rstack.pop();
                }
              }
              var key109 = null;
              var val110 = null;
              key109 = input.readI32().value;
              val110 = input.readString().value;
              elem102[key109] = val110;
            }
            input.readMapEnd();
            val95.push(elem102);
          }
          input.readListEnd();
          this.localizedParemeters[key94] = val95;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChoiceVariant.prototype.write = function(output) {
  output.writeStructBegin('ChoiceVariant');
  if (this.choiceVariantId !== null && this.choiceVariantId !== undefined) {
    output.writeFieldBegin('choiceVariantId', Thrift.Type.STRING, 1);
    output.writeString(this.choiceVariantId);
    output.writeFieldEnd();
  }
  if (this.choiceId !== null && this.choiceId !== undefined) {
    output.writeFieldBegin('choiceId', Thrift.Type.STRING, 2);
    output.writeString(this.choiceId);
    output.writeFieldEnd();
  }
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.tags.length);
    for (var iter111 in this.tags)
    {
      if (this.tags.hasOwnProperty(iter111))
      {
        iter111 = this.tags[iter111];
        output.writeString(iter111);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.simpleParameters !== null && this.simpleParameters !== undefined) {
    output.writeFieldBegin('simpleParameters', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.simpleParameters));
    for (var kiter112 in this.simpleParameters)
    {
      if (this.simpleParameters.hasOwnProperty(kiter112))
      {
        var viter113 = this.simpleParameters[kiter112];
        output.writeString(kiter112);
        output.writeListBegin(Thrift.Type.STRING, viter113.length);
        for (var iter114 in viter113)
        {
          if (viter113.hasOwnProperty(iter114))
          {
            iter114 = viter113[iter114];
            output.writeString(iter114);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.localizedParemeters !== null && this.localizedParemeters !== undefined) {
    output.writeFieldBegin('localizedParemeters', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.localizedParemeters));
    for (var kiter115 in this.localizedParemeters)
    {
      if (this.localizedParemeters.hasOwnProperty(kiter115))
      {
        var viter116 = this.localizedParemeters[kiter115];
        output.writeString(kiter115);
        output.writeListBegin(Thrift.Type.MAP, viter116.length);
        for (var iter117 in viter116)
        {
          if (viter116.hasOwnProperty(iter117))
          {
            iter117 = viter116[iter117];
            output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRING, Thrift.objectLength(iter117));
            for (var kiter118 in iter117)
            {
              if (iter117.hasOwnProperty(kiter118))
              {
                var viter119 = iter117[kiter118];
                output.writeI32(kiter118);
                output.writeString(viter119);
              }
            }
            output.writeMapEnd();
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProcessTaskExecutionStatus = function(args) {
  this.statusType = null;
  this.information = null;
  if (args) {
    if (args.statusType !== undefined) {
      this.statusType = args.statusType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field statusType is unset!');
    }
    if (args.information !== undefined) {
      this.information = args.information;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field information is unset!');
    }
  }
};
ProcessTaskExecutionStatus.prototype = {};
ProcessTaskExecutionStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.statusType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.information = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProcessTaskExecutionStatus.prototype.write = function(output) {
  output.writeStructBegin('ProcessTaskExecutionStatus');
  if (this.statusType !== null && this.statusType !== undefined) {
    output.writeFieldBegin('statusType', Thrift.Type.I32, 1);
    output.writeI32(this.statusType);
    output.writeFieldEnd();
  }
  if (this.information !== null && this.information !== undefined) {
    output.writeFieldBegin('information', Thrift.Type.STRING, 2);
    output.writeString(this.information);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProcessTaskExecutionParameters = function(args) {
  this.processTaskId = null;
  this.development = null;
  this.delta = null;
  this.forceStart = null;
  if (args) {
    if (args.processTaskId !== undefined) {
      this.processTaskId = args.processTaskId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field processTaskId is unset!');
    }
    if (args.development !== undefined) {
      this.development = args.development;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field development is unset!');
    }
    if (args.delta !== undefined) {
      this.delta = args.delta;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field delta is unset!');
    }
    if (args.forceStart !== undefined) {
      this.forceStart = args.forceStart;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field forceStart is unset!');
    }
  }
};
ProcessTaskExecutionParameters.prototype = {};
ProcessTaskExecutionParameters.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.processTaskId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.development = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.delta = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.forceStart = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProcessTaskExecutionParameters.prototype.write = function(output) {
  output.writeStructBegin('ProcessTaskExecutionParameters');
  if (this.processTaskId !== null && this.processTaskId !== undefined) {
    output.writeFieldBegin('processTaskId', Thrift.Type.STRING, 1);
    output.writeString(this.processTaskId);
    output.writeFieldEnd();
  }
  if (this.development !== null && this.development !== undefined) {
    output.writeFieldBegin('development', Thrift.Type.BOOL, 2);
    output.writeBool(this.development);
    output.writeFieldEnd();
  }
  if (this.delta !== null && this.delta !== undefined) {
    output.writeFieldBegin('delta', Thrift.Type.BOOL, 3);
    output.writeBool(this.delta);
    output.writeFieldEnd();
  }
  if (this.forceStart !== null && this.forceStart !== undefined) {
    output.writeFieldBegin('forceStart', Thrift.Type.BOOL, 4);
    output.writeBool(this.forceStart);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReferenceCSVFileDescriptor = function(args) {
  this.fileId = null;
  this.fileColumns = null;
  this.fileHash = null;
  if (args) {
    if (args.fileId !== undefined) {
      this.fileId = args.fileId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field fileId is unset!');
    }
    if (args.fileColumns !== undefined) {
      this.fileColumns = args.fileColumns;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field fileColumns is unset!');
    }
    if (args.fileHash !== undefined) {
      this.fileHash = args.fileHash;
    }
  }
};
ReferenceCSVFileDescriptor.prototype = {};
ReferenceCSVFileDescriptor.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fileId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size120 = 0;
        var _rtmp3124;
        this.fileColumns = {};
        var _ktype121 = 0;
        var _vtype122 = 0;
        _rtmp3124 = input.readMapBegin();
        _ktype121 = _rtmp3124.ktype;
        _vtype122 = _rtmp3124.vtype;
        _size120 = _rtmp3124.size;
        for (var _i125 = 0; _i125 < _size120; ++_i125)
        {
          if (_i125 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key126 = null;
          var val127 = null;
          key126 = input.readString().value;
          val127 = input.readI32().value;
          this.fileColumns[key126] = val127;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.fileHash = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReferenceCSVFileDescriptor.prototype.write = function(output) {
  output.writeStructBegin('ReferenceCSVFileDescriptor');
  if (this.fileId !== null && this.fileId !== undefined) {
    output.writeFieldBegin('fileId', Thrift.Type.STRING, 1);
    output.writeString(this.fileId);
    output.writeFieldEnd();
  }
  if (this.fileColumns !== null && this.fileColumns !== undefined) {
    output.writeFieldBegin('fileColumns', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I32, Thrift.objectLength(this.fileColumns));
    for (var kiter128 in this.fileColumns)
    {
      if (this.fileColumns.hasOwnProperty(kiter128))
      {
        var viter129 = this.fileColumns[kiter128];
        output.writeString(kiter128);
        output.writeI32(viter129);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.fileHash !== null && this.fileHash !== undefined) {
    output.writeFieldBegin('fileHash', Thrift.Type.STRING, 3);
    output.writeString(this.fileHash);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SchedulingExecutionParameters = function(args) {
  this.schedulingId = null;
  this.development = null;
  this.delta = null;
  this.forceStart = null;
  if (args) {
    if (args.schedulingId !== undefined) {
      this.schedulingId = args.schedulingId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field schedulingId is unset!');
    }
    if (args.development !== undefined) {
      this.development = args.development;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field development is unset!');
    }
    if (args.delta !== undefined) {
      this.delta = args.delta;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field delta is unset!');
    }
    if (args.forceStart !== undefined) {
      this.forceStart = args.forceStart;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field forceStart is unset!');
    }
  }
};
SchedulingExecutionParameters.prototype = {};
SchedulingExecutionParameters.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.schedulingId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.development = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.delta = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.forceStart = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SchedulingExecutionParameters.prototype.write = function(output) {
  output.writeStructBegin('SchedulingExecutionParameters');
  if (this.schedulingId !== null && this.schedulingId !== undefined) {
    output.writeFieldBegin('schedulingId', Thrift.Type.STRING, 1);
    output.writeString(this.schedulingId);
    output.writeFieldEnd();
  }
  if (this.development !== null && this.development !== undefined) {
    output.writeFieldBegin('development', Thrift.Type.BOOL, 2);
    output.writeBool(this.development);
    output.writeFieldEnd();
  }
  if (this.delta !== null && this.delta !== undefined) {
    output.writeFieldBegin('delta', Thrift.Type.BOOL, 3);
    output.writeBool(this.delta);
    output.writeFieldEnd();
  }
  if (this.forceStart !== null && this.forceStart !== undefined) {
    output.writeFieldBegin('forceStart', Thrift.Type.BOOL, 4);
    output.writeBool(this.forceStart);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimeRange = function(args) {
  this.from = null;
  this.to = null;
  if (args) {
    if (args.from !== undefined) {
      this.from = args.from;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field from is unset!');
    }
    if (args.to !== undefined) {
      this.to = args.to;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field to is unset!');
    }
  }
};
TimeRange.prototype = {};
TimeRange.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.from = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.to = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimeRange.prototype.write = function(output) {
  output.writeStructBegin('TimeRange');
  if (this.from !== null && this.from !== undefined) {
    output.writeFieldBegin('from', Thrift.Type.I64, 1);
    output.writeI64(this.from);
    output.writeFieldEnd();
  }
  if (this.to !== null && this.to !== undefined) {
    output.writeFieldBegin('to', Thrift.Type.I64, 2);
    output.writeI64(this.to);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimeRangeValue = function(args) {
  this.range = null;
  this.value = null;
  if (args) {
    if (args.range !== undefined) {
      this.range = args.range;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field range is unset!');
    }
    if (args.value !== undefined) {
      this.value = args.value;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field value is unset!');
    }
  }
};
TimeRangeValue.prototype = {};
TimeRangeValue.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.range = new TimeRange();
        this.range.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.value = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimeRangeValue.prototype.write = function(output) {
  output.writeStructBegin('TimeRangeValue');
  if (this.range !== null && this.range !== undefined) {
    output.writeFieldBegin('range', Thrift.Type.STRUCT, 1);
    this.range.write(output);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReportMetric = function(args) {
  this.type = null;
  this.identifier = null;
  if (args) {
    if (args.type !== undefined) {
      this.type = args.type;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field type is unset!');
    }
    if (args.identifier !== undefined) {
      this.identifier = args.identifier;
    }
  }
};
ReportMetric.prototype = {};
ReportMetric.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.identifier = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportMetric.prototype.write = function(output) {
  output.writeStructBegin('ReportMetric');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.identifier !== null && this.identifier !== undefined) {
    output.writeFieldBegin('identifier', Thrift.Type.STRING, 2);
    output.writeString(this.identifier);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReportDimension = function(args) {
  this.type = null;
  this.identifier = null;
  this.param1 = null;
  this.param2 = null;
  this.param3 = null;
  if (args) {
    if (args.type !== undefined) {
      this.type = args.type;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field type is unset!');
    }
    if (args.identifier !== undefined) {
      this.identifier = args.identifier;
    }
    if (args.param1 !== undefined) {
      this.param1 = args.param1;
    }
    if (args.param2 !== undefined) {
      this.param2 = args.param2;
    }
    if (args.param3 !== undefined) {
      this.param3 = args.param3;
    }
  }
};
ReportDimension.prototype = {};
ReportDimension.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.identifier = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.param1 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.param2 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.param3 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportDimension.prototype.write = function(output) {
  output.writeStructBegin('ReportDimension');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.identifier !== null && this.identifier !== undefined) {
    output.writeFieldBegin('identifier', Thrift.Type.STRING, 2);
    output.writeString(this.identifier);
    output.writeFieldEnd();
  }
  if (this.param1 !== null && this.param1 !== undefined) {
    output.writeFieldBegin('param1', Thrift.Type.STRING, 3);
    output.writeString(this.param1);
    output.writeFieldEnd();
  }
  if (this.param2 !== null && this.param2 !== undefined) {
    output.writeFieldBegin('param2', Thrift.Type.STRING, 4);
    output.writeString(this.param2);
    output.writeFieldEnd();
  }
  if (this.param3 !== null && this.param3 !== undefined) {
    output.writeFieldBegin('param3', Thrift.Type.STRING, 5);
    output.writeString(this.param3);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ConditionTarget = function(args) {
  this.operator = null;
  this.value = null;
  if (args) {
    if (args.operator !== undefined) {
      this.operator = args.operator;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field operator is unset!');
    }
    if (args.value !== undefined) {
      this.value = args.value;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field value is unset!');
    }
  }
};
ConditionTarget.prototype = {};
ConditionTarget.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.operator = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ConditionTarget.prototype.write = function(output) {
  output.writeStructBegin('ConditionTarget');
  if (this.operator !== null && this.operator !== undefined) {
    output.writeFieldBegin('operator', Thrift.Type.I32, 1);
    output.writeI32(this.operator);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 2);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DimensionCondition = function(args) {
  this.dimension = null;
  this.conditionTargets = null;
  if (args) {
    if (args.dimension !== undefined) {
      this.dimension = args.dimension;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field dimension is unset!');
    }
    if (args.conditionTargets !== undefined) {
      this.conditionTargets = args.conditionTargets;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field conditionTargets is unset!');
    }
  }
};
DimensionCondition.prototype = {};
DimensionCondition.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.dimension = new ReportDimension();
        this.dimension.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size130 = 0;
        var _rtmp3134;
        this.conditionTargets = [];
        var _etype133 = 0;
        _rtmp3134 = input.readListBegin();
        _etype133 = _rtmp3134.etype;
        _size130 = _rtmp3134.size;
        for (var _i135 = 0; _i135 < _size130; ++_i135)
        {
          var elem136 = null;
          elem136 = new ConditionTarget();
          elem136.read(input);
          this.conditionTargets.push(elem136);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DimensionCondition.prototype.write = function(output) {
  output.writeStructBegin('DimensionCondition');
  if (this.dimension !== null && this.dimension !== undefined) {
    output.writeFieldBegin('dimension', Thrift.Type.STRUCT, 1);
    this.dimension.write(output);
    output.writeFieldEnd();
  }
  if (this.conditionTargets !== null && this.conditionTargets !== undefined) {
    output.writeFieldBegin('conditionTargets', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.conditionTargets.length);
    for (var iter137 in this.conditionTargets)
    {
      if (this.conditionTargets.hasOwnProperty(iter137))
      {
        iter137 = this.conditionTargets[iter137];
        iter137.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetricCondition = function(args) {
  this.metric = null;
  this.conditionTargets = null;
  if (args) {
    if (args.metric !== undefined) {
      this.metric = args.metric;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field metric is unset!');
    }
    if (args.conditionTargets !== undefined) {
      this.conditionTargets = args.conditionTargets;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field conditionTargets is unset!');
    }
  }
};
MetricCondition.prototype = {};
MetricCondition.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.metric = new ReportMetric();
        this.metric.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size138 = 0;
        var _rtmp3142;
        this.conditionTargets = [];
        var _etype141 = 0;
        _rtmp3142 = input.readListBegin();
        _etype141 = _rtmp3142.etype;
        _size138 = _rtmp3142.size;
        for (var _i143 = 0; _i143 < _size138; ++_i143)
        {
          var elem144 = null;
          elem144 = new ConditionTarget();
          elem144.read(input);
          this.conditionTargets.push(elem144);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetricCondition.prototype.write = function(output) {
  output.writeStructBegin('MetricCondition');
  if (this.metric !== null && this.metric !== undefined) {
    output.writeFieldBegin('metric', Thrift.Type.STRUCT, 1);
    this.metric.write(output);
    output.writeFieldEnd();
  }
  if (this.conditionTargets !== null && this.conditionTargets !== undefined) {
    output.writeFieldBegin('conditionTargets', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.conditionTargets.length);
    for (var iter145 in this.conditionTargets)
    {
      if (this.conditionTargets.hasOwnProperty(iter145))
      {
        iter145 = this.conditionTargets[iter145];
        iter145.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReportFilter = function(args) {
  this.dimensionConditions = null;
  this.metricConditions = null;
  if (args) {
    if (args.dimensionConditions !== undefined) {
      this.dimensionConditions = args.dimensionConditions;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field dimensionConditions is unset!');
    }
    if (args.metricConditions !== undefined) {
      this.metricConditions = args.metricConditions;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field metricConditions is unset!');
    }
  }
};
ReportFilter.prototype = {};
ReportFilter.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size146 = 0;
        var _rtmp3150;
        this.dimensionConditions = [];
        var _etype149 = 0;
        _rtmp3150 = input.readListBegin();
        _etype149 = _rtmp3150.etype;
        _size146 = _rtmp3150.size;
        for (var _i151 = 0; _i151 < _size146; ++_i151)
        {
          var elem152 = null;
          elem152 = new DimensionCondition();
          elem152.read(input);
          this.dimensionConditions.push(elem152);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size153 = 0;
        var _rtmp3157;
        this.metricConditions = [];
        var _etype156 = 0;
        _rtmp3157 = input.readListBegin();
        _etype156 = _rtmp3157.etype;
        _size153 = _rtmp3157.size;
        for (var _i158 = 0; _i158 < _size153; ++_i158)
        {
          var elem159 = null;
          elem159 = new MetricCondition();
          elem159.read(input);
          this.metricConditions.push(elem159);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportFilter.prototype.write = function(output) {
  output.writeStructBegin('ReportFilter');
  if (this.dimensionConditions !== null && this.dimensionConditions !== undefined) {
    output.writeFieldBegin('dimensionConditions', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.dimensionConditions.length);
    for (var iter160 in this.dimensionConditions)
    {
      if (this.dimensionConditions.hasOwnProperty(iter160))
      {
        iter160 = this.dimensionConditions[iter160];
        iter160.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.metricConditions !== null && this.metricConditions !== undefined) {
    output.writeFieldBegin('metricConditions', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.metricConditions.length);
    for (var iter161 in this.metricConditions)
    {
      if (this.metricConditions.hasOwnProperty(iter161))
      {
        iter161 = this.metricConditions[iter161];
        iter161.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReportMetricValue = function(args) {
  this.metric = null;
  this.value = null;
  if (args) {
    if (args.metric !== undefined) {
      this.metric = args.metric;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field metric is unset!');
    }
    if (args.value !== undefined) {
      this.value = args.value;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field value is unset!');
    }
  }
};
ReportMetricValue.prototype = {};
ReportMetricValue.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.metric = new ReportMetric();
        this.metric.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.value = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportMetricValue.prototype.write = function(output) {
  output.writeStructBegin('ReportMetricValue');
  if (this.metric !== null && this.metric !== undefined) {
    output.writeFieldBegin('metric', Thrift.Type.STRUCT, 1);
    this.metric.write(output);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReportDimensionValue = function(args) {
  this.dimension = null;
  this.value = null;
  if (args) {
    if (args.dimension !== undefined) {
      this.dimension = args.dimension;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field dimension is unset!');
    }
    if (args.value !== undefined) {
      this.value = args.value;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field value is unset!');
    }
  }
};
ReportDimensionValue.prototype = {};
ReportDimensionValue.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.dimension = new ReportDimension();
        this.dimension.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportDimensionValue.prototype.write = function(output) {
  output.writeStructBegin('ReportDimensionValue');
  if (this.dimension !== null && this.dimension !== undefined) {
    output.writeFieldBegin('dimension', Thrift.Type.STRUCT, 1);
    this.dimension.write(output);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 2);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReportResultKeyValues = function(args) {
  this.range = null;
  this.values = null;
  if (args) {
    if (args.range !== undefined) {
      this.range = args.range;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field range is unset!');
    }
    if (args.values !== undefined) {
      this.values = args.values;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field values is unset!');
    }
  }
};
ReportResultKeyValues.prototype = {};
ReportResultKeyValues.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.range = new TimeRange();
        this.range.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size162 = 0;
        var _rtmp3166;
        this.values = [];
        var _etype165 = 0;
        _rtmp3166 = input.readListBegin();
        _etype165 = _rtmp3166.etype;
        _size162 = _rtmp3166.size;
        for (var _i167 = 0; _i167 < _size162; ++_i167)
        {
          var elem168 = null;
          elem168 = new ReportMetricValue();
          elem168.read(input);
          this.values.push(elem168);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportResultKeyValues.prototype.write = function(output) {
  output.writeStructBegin('ReportResultKeyValues');
  if (this.range !== null && this.range !== undefined) {
    output.writeFieldBegin('range', Thrift.Type.STRUCT, 1);
    this.range.write(output);
    output.writeFieldEnd();
  }
  if (this.values !== null && this.values !== undefined) {
    output.writeFieldBegin('values', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.values.length);
    for (var iter169 in this.values)
    {
      if (this.values.hasOwnProperty(iter169))
      {
        iter169 = this.values[iter169];
        iter169.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReportResultValues = function(args) {
  this.type = null;
  this.values = null;
  if (args) {
    if (args.type !== undefined) {
      this.type = args.type;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field type is unset!');
    }
    if (args.values !== undefined) {
      this.values = args.values;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field values is unset!');
    }
  }
};
ReportResultValues.prototype = {};
ReportResultValues.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size170 = 0;
        var _rtmp3174;
        this.values = [];
        var _etype173 = 0;
        _rtmp3174 = input.readListBegin();
        _etype173 = _rtmp3174.etype;
        _size170 = _rtmp3174.size;
        for (var _i175 = 0; _i175 < _size170; ++_i175)
        {
          var elem176 = null;
          elem176 = new ReportResultKeyValues();
          elem176.read(input);
          this.values.push(elem176);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportResultValues.prototype.write = function(output) {
  output.writeStructBegin('ReportResultValues');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.values !== null && this.values !== undefined) {
    output.writeFieldBegin('values', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.values.length);
    for (var iter177 in this.values)
    {
      if (this.values.hasOwnProperty(iter177))
      {
        iter177 = this.values[iter177];
        iter177.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TransactionReportRequest = function(args) {
  this.metrics = null;
  this.dimensions = null;
  this.filter = null;
  this.cohortIdField = null;
  this.sortBys = null;
  this.range = null;
  this.precision = null;
  this.startIndex = null;
  this.maxResults = null;
  this.ignoreFillMissingTimeValuesWithZeros = null;
  if (args) {
    if (args.metrics !== undefined) {
      this.metrics = args.metrics;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field metrics is unset!');
    }
    if (args.dimensions !== undefined) {
      this.dimensions = args.dimensions;
    }
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
    if (args.cohortIdField !== undefined) {
      this.cohortIdField = args.cohortIdField;
    }
    if (args.sortBys !== undefined) {
      this.sortBys = args.sortBys;
    }
    if (args.range !== undefined) {
      this.range = args.range;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field range is unset!');
    }
    if (args.precision !== undefined) {
      this.precision = args.precision;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field precision is unset!');
    }
    if (args.startIndex !== undefined) {
      this.startIndex = args.startIndex;
    }
    if (args.maxResults !== undefined) {
      this.maxResults = args.maxResults;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field maxResults is unset!');
    }
    if (args.ignoreFillMissingTimeValuesWithZeros !== undefined) {
      this.ignoreFillMissingTimeValuesWithZeros = args.ignoreFillMissingTimeValuesWithZeros;
    }
  }
};
TransactionReportRequest.prototype = {};
TransactionReportRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size178 = 0;
        var _rtmp3182;
        this.metrics = [];
        var _etype181 = 0;
        _rtmp3182 = input.readListBegin();
        _etype181 = _rtmp3182.etype;
        _size178 = _rtmp3182.size;
        for (var _i183 = 0; _i183 < _size178; ++_i183)
        {
          var elem184 = null;
          elem184 = new ReportMetric();
          elem184.read(input);
          this.metrics.push(elem184);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size185 = 0;
        var _rtmp3189;
        this.dimensions = [];
        var _etype188 = 0;
        _rtmp3189 = input.readListBegin();
        _etype188 = _rtmp3189.etype;
        _size185 = _rtmp3189.size;
        for (var _i190 = 0; _i190 < _size185; ++_i190)
        {
          var elem191 = null;
          elem191 = new ReportDimension();
          elem191.read(input);
          this.dimensions.push(elem191);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new ReportFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.cohortIdField = new Field();
        this.cohortIdField.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size192 = 0;
        var _rtmp3196;
        this.sortBys = [];
        var _etype195 = 0;
        _rtmp3196 = input.readListBegin();
        _etype195 = _rtmp3196.etype;
        _size192 = _rtmp3196.size;
        for (var _i197 = 0; _i197 < _size192; ++_i197)
        {
          var elem198 = null;
          elem198 = new ReportMetric();
          elem198.read(input);
          this.sortBys.push(elem198);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.range = new TimeRange();
        this.range.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.precision = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I16) {
        this.startIndex = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I16) {
        this.maxResults = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.ignoreFillMissingTimeValuesWithZeros = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TransactionReportRequest.prototype.write = function(output) {
  output.writeStructBegin('TransactionReportRequest');
  if (this.metrics !== null && this.metrics !== undefined) {
    output.writeFieldBegin('metrics', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.metrics.length);
    for (var iter199 in this.metrics)
    {
      if (this.metrics.hasOwnProperty(iter199))
      {
        iter199 = this.metrics[iter199];
        iter199.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.dimensions !== null && this.dimensions !== undefined) {
    output.writeFieldBegin('dimensions', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.dimensions.length);
    for (var iter200 in this.dimensions)
    {
      if (this.dimensions.hasOwnProperty(iter200))
      {
        iter200 = this.dimensions[iter200];
        iter200.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 3);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  if (this.cohortIdField !== null && this.cohortIdField !== undefined) {
    output.writeFieldBegin('cohortIdField', Thrift.Type.STRUCT, 4);
    this.cohortIdField.write(output);
    output.writeFieldEnd();
  }
  if (this.sortBys !== null && this.sortBys !== undefined) {
    output.writeFieldBegin('sortBys', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.sortBys.length);
    for (var iter201 in this.sortBys)
    {
      if (this.sortBys.hasOwnProperty(iter201))
      {
        iter201 = this.sortBys[iter201];
        iter201.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.range !== null && this.range !== undefined) {
    output.writeFieldBegin('range', Thrift.Type.STRUCT, 6);
    this.range.write(output);
    output.writeFieldEnd();
  }
  if (this.precision !== null && this.precision !== undefined) {
    output.writeFieldBegin('precision', Thrift.Type.I32, 7);
    output.writeI32(this.precision);
    output.writeFieldEnd();
  }
  if (this.startIndex !== null && this.startIndex !== undefined) {
    output.writeFieldBegin('startIndex', Thrift.Type.I16, 8);
    output.writeI16(this.startIndex);
    output.writeFieldEnd();
  }
  if (this.maxResults !== null && this.maxResults !== undefined) {
    output.writeFieldBegin('maxResults', Thrift.Type.I16, 9);
    output.writeI16(this.maxResults);
    output.writeFieldEnd();
  }
  if (this.ignoreFillMissingTimeValuesWithZeros !== null && this.ignoreFillMissingTimeValuesWithZeros !== undefined) {
    output.writeFieldBegin('ignoreFillMissingTimeValuesWithZeros', Thrift.Type.BOOL, 10);
    output.writeBool(this.ignoreFillMissingTimeValuesWithZeros);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TransactionReportResult = function(args) {
  this.dimensionValues = null;
  this.values = null;
  if (args) {
    if (args.dimensionValues !== undefined) {
      this.dimensionValues = args.dimensionValues;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field dimensionValues is unset!');
    }
    if (args.values !== undefined) {
      this.values = args.values;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field values is unset!');
    }
  }
};
TransactionReportResult.prototype = {};
TransactionReportResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size202 = 0;
        var _rtmp3206;
        this.dimensionValues = [];
        var _etype205 = 0;
        _rtmp3206 = input.readListBegin();
        _etype205 = _rtmp3206.etype;
        _size202 = _rtmp3206.size;
        for (var _i207 = 0; _i207 < _size202; ++_i207)
        {
          var elem208 = null;
          elem208 = new ReportDimensionValue();
          elem208.read(input);
          this.dimensionValues.push(elem208);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.values = new ReportResultValues();
        this.values.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TransactionReportResult.prototype.write = function(output) {
  output.writeStructBegin('TransactionReportResult');
  if (this.dimensionValues !== null && this.dimensionValues !== undefined) {
    output.writeFieldBegin('dimensionValues', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.dimensionValues.length);
    for (var iter209 in this.dimensionValues)
    {
      if (this.dimensionValues.hasOwnProperty(iter209))
      {
        iter209 = this.dimensionValues[iter209];
        iter209.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.values !== null && this.values !== undefined) {
    output.writeFieldBegin('values', Thrift.Type.STRUCT, 2);
    this.values.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TransactionReport = function(args) {
  this.results = null;
  this.totalResult = null;
  if (args) {
    if (args.results !== undefined) {
      this.results = args.results;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field results is unset!');
    }
    if (args.totalResult !== undefined) {
      this.totalResult = args.totalResult;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field totalResult is unset!');
    }
  }
};
TransactionReport.prototype = {};
TransactionReport.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size210 = 0;
        var _rtmp3214;
        this.results = [];
        var _etype213 = 0;
        _rtmp3214 = input.readListBegin();
        _etype213 = _rtmp3214.etype;
        _size210 = _rtmp3214.size;
        for (var _i215 = 0; _i215 < _size210; ++_i215)
        {
          var elem216 = null;
          elem216 = new TransactionReportResult();
          elem216.read(input);
          this.results.push(elem216);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size217 = 0;
        var _rtmp3221;
        this.totalResult = [];
        var _etype220 = 0;
        _rtmp3221 = input.readListBegin();
        _etype220 = _rtmp3221.etype;
        _size217 = _rtmp3221.size;
        for (var _i222 = 0; _i222 < _size217; ++_i222)
        {
          var elem223 = null;
          elem223 = new TransactionReportResult();
          elem223.read(input);
          this.totalResult.push(elem223);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TransactionReport.prototype.write = function(output) {
  output.writeStructBegin('TransactionReport');
  if (this.results !== null && this.results !== undefined) {
    output.writeFieldBegin('results', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.results.length);
    for (var iter224 in this.results)
    {
      if (this.results.hasOwnProperty(iter224))
      {
        iter224 = this.results[iter224];
        iter224.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.totalResult !== null && this.totalResult !== undefined) {
    output.writeFieldBegin('totalResult', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.totalResult.length);
    for (var iter225 in this.totalResult)
    {
      if (this.totalResult.hasOwnProperty(iter225))
      {
        iter225 = this.totalResult[iter225];
        iter225.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BehaviorReportRequest = function(args) {
  this.metrics = null;
  this.dimensions = null;
  this.filter = null;
  this.sortBys = null;
  this.range = null;
  this.precision = null;
  this.startIndex = null;
  this.maxResults = null;
  this.ignoreFillMissingTimeValuesWithZeros = null;
  if (args) {
    if (args.metrics !== undefined) {
      this.metrics = args.metrics;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field metrics is unset!');
    }
    if (args.dimensions !== undefined) {
      this.dimensions = args.dimensions;
    }
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
    if (args.sortBys !== undefined) {
      this.sortBys = args.sortBys;
    }
    if (args.range !== undefined) {
      this.range = args.range;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field range is unset!');
    }
    if (args.precision !== undefined) {
      this.precision = args.precision;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field precision is unset!');
    }
    if (args.startIndex !== undefined) {
      this.startIndex = args.startIndex;
    }
    if (args.maxResults !== undefined) {
      this.maxResults = args.maxResults;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field maxResults is unset!');
    }
    if (args.ignoreFillMissingTimeValuesWithZeros !== undefined) {
      this.ignoreFillMissingTimeValuesWithZeros = args.ignoreFillMissingTimeValuesWithZeros;
    }
  }
};
BehaviorReportRequest.prototype = {};
BehaviorReportRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size226 = 0;
        var _rtmp3230;
        this.metrics = [];
        var _etype229 = 0;
        _rtmp3230 = input.readListBegin();
        _etype229 = _rtmp3230.etype;
        _size226 = _rtmp3230.size;
        for (var _i231 = 0; _i231 < _size226; ++_i231)
        {
          var elem232 = null;
          elem232 = new ReportMetric();
          elem232.read(input);
          this.metrics.push(elem232);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size233 = 0;
        var _rtmp3237;
        this.dimensions = [];
        var _etype236 = 0;
        _rtmp3237 = input.readListBegin();
        _etype236 = _rtmp3237.etype;
        _size233 = _rtmp3237.size;
        for (var _i238 = 0; _i238 < _size233; ++_i238)
        {
          var elem239 = null;
          elem239 = new ReportDimension();
          elem239.read(input);
          this.dimensions.push(elem239);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new ReportFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size240 = 0;
        var _rtmp3244;
        this.sortBys = [];
        var _etype243 = 0;
        _rtmp3244 = input.readListBegin();
        _etype243 = _rtmp3244.etype;
        _size240 = _rtmp3244.size;
        for (var _i245 = 0; _i245 < _size240; ++_i245)
        {
          var elem246 = null;
          elem246 = new ReportMetric();
          elem246.read(input);
          this.sortBys.push(elem246);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.range = new TimeRange();
        this.range.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.precision = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I16) {
        this.startIndex = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I16) {
        this.maxResults = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.ignoreFillMissingTimeValuesWithZeros = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BehaviorReportRequest.prototype.write = function(output) {
  output.writeStructBegin('BehaviorReportRequest');
  if (this.metrics !== null && this.metrics !== undefined) {
    output.writeFieldBegin('metrics', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.metrics.length);
    for (var iter247 in this.metrics)
    {
      if (this.metrics.hasOwnProperty(iter247))
      {
        iter247 = this.metrics[iter247];
        iter247.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.dimensions !== null && this.dimensions !== undefined) {
    output.writeFieldBegin('dimensions', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.dimensions.length);
    for (var iter248 in this.dimensions)
    {
      if (this.dimensions.hasOwnProperty(iter248))
      {
        iter248 = this.dimensions[iter248];
        iter248.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 3);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  if (this.sortBys !== null && this.sortBys !== undefined) {
    output.writeFieldBegin('sortBys', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.sortBys.length);
    for (var iter249 in this.sortBys)
    {
      if (this.sortBys.hasOwnProperty(iter249))
      {
        iter249 = this.sortBys[iter249];
        iter249.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.range !== null && this.range !== undefined) {
    output.writeFieldBegin('range', Thrift.Type.STRUCT, 5);
    this.range.write(output);
    output.writeFieldEnd();
  }
  if (this.precision !== null && this.precision !== undefined) {
    output.writeFieldBegin('precision', Thrift.Type.I32, 6);
    output.writeI32(this.precision);
    output.writeFieldEnd();
  }
  if (this.startIndex !== null && this.startIndex !== undefined) {
    output.writeFieldBegin('startIndex', Thrift.Type.I16, 7);
    output.writeI16(this.startIndex);
    output.writeFieldEnd();
  }
  if (this.maxResults !== null && this.maxResults !== undefined) {
    output.writeFieldBegin('maxResults', Thrift.Type.I16, 8);
    output.writeI16(this.maxResults);
    output.writeFieldEnd();
  }
  if (this.ignoreFillMissingTimeValuesWithZeros !== null && this.ignoreFillMissingTimeValuesWithZeros !== undefined) {
    output.writeFieldBegin('ignoreFillMissingTimeValuesWithZeros', Thrift.Type.BOOL, 9);
    output.writeBool(this.ignoreFillMissingTimeValuesWithZeros);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BehaviorReportResult = function(args) {
  this.dimensionValues = null;
  this.values = null;
  if (args) {
    if (args.dimensionValues !== undefined) {
      this.dimensionValues = args.dimensionValues;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field dimensionValues is unset!');
    }
    if (args.values !== undefined) {
      this.values = args.values;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field values is unset!');
    }
  }
};
BehaviorReportResult.prototype = {};
BehaviorReportResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size250 = 0;
        var _rtmp3254;
        this.dimensionValues = [];
        var _etype253 = 0;
        _rtmp3254 = input.readListBegin();
        _etype253 = _rtmp3254.etype;
        _size250 = _rtmp3254.size;
        for (var _i255 = 0; _i255 < _size250; ++_i255)
        {
          var elem256 = null;
          elem256 = new ReportDimensionValue();
          elem256.read(input);
          this.dimensionValues.push(elem256);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.values = new ReportResultValues();
        this.values.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BehaviorReportResult.prototype.write = function(output) {
  output.writeStructBegin('BehaviorReportResult');
  if (this.dimensionValues !== null && this.dimensionValues !== undefined) {
    output.writeFieldBegin('dimensionValues', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.dimensionValues.length);
    for (var iter257 in this.dimensionValues)
    {
      if (this.dimensionValues.hasOwnProperty(iter257))
      {
        iter257 = this.dimensionValues[iter257];
        iter257.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.values !== null && this.values !== undefined) {
    output.writeFieldBegin('values', Thrift.Type.STRUCT, 2);
    this.values.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BehaviorReport = function(args) {
  this.results = null;
  this.totalResult = null;
  if (args) {
    if (args.results !== undefined) {
      this.results = args.results;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field results is unset!');
    }
    if (args.totalResult !== undefined) {
      this.totalResult = args.totalResult;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field totalResult is unset!');
    }
  }
};
BehaviorReport.prototype = {};
BehaviorReport.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size258 = 0;
        var _rtmp3262;
        this.results = [];
        var _etype261 = 0;
        _rtmp3262 = input.readListBegin();
        _etype261 = _rtmp3262.etype;
        _size258 = _rtmp3262.size;
        for (var _i263 = 0; _i263 < _size258; ++_i263)
        {
          var elem264 = null;
          elem264 = new BehaviorReportResult();
          elem264.read(input);
          this.results.push(elem264);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size265 = 0;
        var _rtmp3269;
        this.totalResult = [];
        var _etype268 = 0;
        _rtmp3269 = input.readListBegin();
        _etype268 = _rtmp3269.etype;
        _size265 = _rtmp3269.size;
        for (var _i270 = 0; _i270 < _size265; ++_i270)
        {
          var elem271 = null;
          elem271 = new BehaviorReportResult();
          elem271.read(input);
          this.totalResult.push(elem271);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BehaviorReport.prototype.write = function(output) {
  output.writeStructBegin('BehaviorReport');
  if (this.results !== null && this.results !== undefined) {
    output.writeFieldBegin('results', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.results.length);
    for (var iter272 in this.results)
    {
      if (this.results.hasOwnProperty(iter272))
      {
        iter272 = this.results[iter272];
        iter272.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.totalResult !== null && this.totalResult !== undefined) {
    output.writeFieldBegin('totalResult', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.totalResult.length);
    for (var iter273 in this.totalResult)
    {
      if (this.totalResult.hasOwnProperty(iter273))
      {
        iter273 = this.totalResult[iter273];
        iter273.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

