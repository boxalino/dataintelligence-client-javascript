<?php
namespace com\boxalino\dataintelligence\api\thrift;
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface BoxalinoDataIntelligenceIf {
  /**
   * this service function returns a new authentication token
   * 
   * <dl>
   * <dt>@param authentication</dt>
   * <dd>a fully complete AuthenticationRequest with the content of your credentials</dd>
   * <dt>@return</dt>
   * <dd>an Authentication object with your new authentication token (valid for 1 hour)</dd>
   * <dt>@throws DataIntelligenceServiceException</dt>
   * <dd>INVALID_CREDENTIALS:if the provided account / username / password information don't match the records of Boxalino system.</dd>
   * <dd>BLOCKED_USER:if the provided user has been blocked.</dd>
   * <dd>BLOCKED_ACCOUNT:if the provided account has been blocked.</dd>
   * </dl>
   * 
   * @param \com\boxalino\dataintelligence\api\thrift\AuthenticationRequest $authentication
   * @return \com\boxalino\dataintelligence\api\thrift\Authentication This structure defines the authentication object (to pass as authentication proof to all function and services)
   * 
   * <dl>
   * <dt>authenticationToken</dt>
   * <dd>the return authentication token is a string valid for one hour</dd>
   * </dl>
   * 
   * @throws \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException
   */
  public function GetAuthentication(\com\boxalino\dataintelligence\api\thrift\AuthenticationRequest $authentication);
  /**
   * this service function changes the current password
   * 
   * <dl>
   * <dt>@param authentication</dt>
   * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
   * <dt>@param newPassword</dt>
   * <dd>the new password to replace the existing one (careful, no forgot the new password, if you lose your password, contact <ahref="mailto:support@boxalino.com">support@boxalino.com</a></dd>
   * <dt>@throws DataIntelligenceServiceException</dt>
   * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
   * <dd>INVALID_NEW_PASSWORD:if the provided new password is not properly formatted (should be at least 8 characters long and not contain any punctuation).</dd>
   * </dl>
   * 
   * @param \com\boxalino\dataintelligence\api\thrift\Authentication $authentication
   * @param string $newPassword
   * @throws \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException
   */
  public function UpdatePassword(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, $newPassword);
  /**
   * this service function returns the configuration version object matching the provided versionType. In general, you should always ask for the CURRENT_DEVELOPMENT_VERSION, unless you want to access directly (at your own risks) the production configuration.
   * 
   * <dl>
   * <dt>@param authenticationToken</dt>
   * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
   * <dt>@throws DataIntelligenceServiceException</dt>
   * <dd>INVALID_AUTHENTICATION_TOKEN: if the provided authentication token is not valid or has expired (1 hour validity).</dd>
   * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
   * <dt>@returns ConfigurationVersion</dt>
   * <dd>The configuration object to use in your calls to other service functions which access your configuration parameters</dd>
   * </dl>
   * 
   * @param \com\boxalino\dataintelligence\api\thrift\Authentication $authentication
   * @param int $versionType
   * @return \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion This structure defines a configuration version of your account. It must be provided to all functions accessing / updating or removing information from your account configuration
   * 
   * <dl>
   * <dt>configurationVersionNumber</dt>
   * <dd>an internal number identifying the configuration version</dd>
   * </dl>
   * 
   * @throws \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException
   */
  public function GetConfigurationVersion(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, $versionType);
  /**
   * this service function udpates your data source configuration.
   * 
   * <dl>
   * <dt>@param authenticationToken</dt>
   * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
   * <dt>@param configurationVersion</dt>
   * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
   * <dt>@param dataSourcesConfigurationXML</dt>
   * <dd>the data source XML must follow the strict XML format and content as defined in the Boxalino documentation. This XML defines the way the system must extract data from the various files (typically a list of CSV files compressed in a zip file) to synchronize your product, customers and transactions data (tracker data are direclty provided to Boxalino Javascript tracker and are there not part of the data to be synchronized here. Please make sure that the product id is defined in a coherent way between he product files, the transaction files and the tracker (product View, add to basket and purchase event) (so the mapping can be done); same comment for the customer id: between the customer files, the transaction files and the tracker (set user event). If you don't have the full documentation of the data source XML, please contact <a href="mailto:support@boxalino.com">support@boxalino.com</a></dd>
   * <dt>@throws DataIntelligenceServiceException</dt>
   * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
   * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
   * <dd>INVALID_DATASOURCE:if the provided new data source XML string doesn't match the required format (see documentation of the data source XML format)</dd>
   * <dt>@Nota Bene</dt>
   * <dd>If you remove fields definition from your data source, they will not be automatically deleted. You need to explicitely delte them through the delete component service function to remove them.</dd>
   * </dl>
   * 
   * @param \com\boxalino\dataintelligence\api\thrift\Authentication $authentication
   * @param \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configurationVersion
   * @param string $dataSourcesConfigurationXML
   * @throws \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException
   */
  public function SetDataSourcesConfiguration(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configurationVersion, $dataSourcesConfigurationXML);
  /**
   * this service function returns the map of all the defined field (key = fieldId, value = Field object).
   * 
   * <dl>
   * <dt>@param authenticationToken</dt>
   * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
   * <dt>@param configurationVersion</dt>
   * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
   * <dt>@throws DataIntelligenceServiceException</dt>
   * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
   * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
   * <dt>@returns map<string, Field></dt>
   * <dd>A map containing all the defined fields of your account in this configuration version, with the fieldId as key and the Field object as value (key is provided for accessibility only, as the field id is also present in the Field object</dd>
   * </dl>
   * 
   * @param \com\boxalino\dataintelligence\api\thrift\Authentication $authentication
   * @param \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration
   * @return array
   * @throws \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException
   */
  public function GetFields(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration);
  /**
   * this service function creates a new field
   * 
   * <dl>
   * <dt>@param authenticationToken</dt>
   * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
   * <dt>@param configurationVersion</dt>
   * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
   * <dt>@param fieldId</dt>
   * <dd>the field id to be created (must follow the content id format: <= 50 alphanumeric characters without accent or punctuation)</dd>
   * <dt>@throws DataIntelligenceServiceException</dt>
   * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
   * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
   * <dd>ALREADY_EXISTING_CONTENT_ID:if the provided field id already exists.</dd>
   * <dd>INVALID_CONTENT_ID:if the provided field id format is not valid.</dd>
   * </dl>
   * 
   * @param \com\boxalino\dataintelligence\api\thrift\Authentication $authentication
   * @param \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration
   * @param string $fieldId
   * @throws \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException
   */
  public function CreateField(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $fieldId);
  /**
   * this service function updates a field
   * 
   * <dl>
   * <dt>@param authenticationToken</dt>
   * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
   * <dt>@param configurationVersion</dt>
   * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
   * <dt>@param field</dt>
   * <dd>a Field object to be updated (the content of the object will be updated on the content id provided)</dd>
   * <dt>@throws DataIntelligenceServiceException</dt>
   * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
   * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
   * <dd>NON_EXISTING_CONTENT_ID:if the provided field id doesn't already exists.</dd>
   * <dd>INVALID_CONTENT:if the provided field content is not valid.</dd>
   * <dd>The </dd>
   * </dl>
   * 
   * @param \com\boxalino\dataintelligence\api\thrift\Authentication $authentication
   * @param \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration
   * @param \com\boxalino\dataintelligence\api\thrift\Field $field
   * @throws \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException
   */
  public function UpdateField(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, \com\boxalino\dataintelligence\api\thrift\Field $field);
  /**
   * this service function deletes a field
   * 
   * <dl>
   * <dt>@param authenticationToken</dt>
   * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
   * <dt>@param configurationVersion</dt>
   * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
   * <dt>@param fieldId</dt>
   * <dd>the field id to be deleted</dd>
   * <dt>@throws DataIntelligenceServiceException</dt>
   * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
   * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
   * <dd>NON_EXISTING_CONTENT_ID:if the provided field id doesn't already exists.</dd>
   * </dl>
   * 
   * @param \com\boxalino\dataintelligence\api\thrift\Authentication $authentication
   * @param \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration
   * @param string $fieldId
   * @throws \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException
   */
  public function DeleteField(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $fieldId);
  /**
   * this service function returns the map of all the defined process tasks (key = processTaskId, value = ProcessTask object).
   * 
   * <dl>
   * <dt>@param authenticationToken</dt>
   * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
   * <dt>@param configurationVersion</dt>
   * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
   * <dt>@throws DataIntelligenceServiceException</dt>
   * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
   * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
   * <dt>@returns map<string, ProcessTask></dt>
   * <dd>A map containing all the defined process tasks of your account in this configuration version, with the processTaskId as key and the ProcessTask object as value (key is provided for accessibility only, as the processTaskId is also present in the ProcessTask object</dd>
   * </dl>
   * 
   * @param \com\boxalino\dataintelligence\api\thrift\Authentication $authentication
   * @param \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration
   * @return array
   * @throws \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException
   */
  public function GetProcessTasks(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration);
  /**
   * this service function creates a new process task
   * 
   * <dl>
   * <dt>@param authenticationToken</dt>
   * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
   * <dt>@param configurationVersion</dt>
   * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
   * <dt>@param processTaskId</dt>
   * <dd>the process task id to be created (must follow the content id format: <= 50 alphanumeric characters without accent or punctuation)</dd>
   * <dt>@throws DataIntelligenceServiceException</dt>
   * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
   * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
   * <dd>ALREADY_EXISTING_CONTENT_ID:if the provided process task id already exists.</dd>
   * <dd>INVALID_CONTENT_ID:if the provided process task id format is not valid.</dd>
   * </dl>
   * 
   * @param \com\boxalino\dataintelligence\api\thrift\Authentication $authentication
   * @param \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration
   * @param string $processTaskId
   * @throws \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException
   */
  public function CreateProcessTask(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $processTaskId);
  /**
   * this service function updates a process task
   * 
   * <dl>
   * <dt>@param authenticationToken</dt>
   * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
   * <dt>@param configurationVersion</dt>
   * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
   * <dt>@param processTask</dt>
   * <dd>a ProcessTask object to be updated (the content of the object will be updated on the content id provided)</dd>
   * <dt>@throws DataIntelligenceServiceException</dt>
   * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
   * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
   * <dd>NON_EXISTING_CONTENT_ID:if the provided process task id doesn't already exists.</dd>
   * <dd>INVALID_CONTENT:if the provided process task content is not valid.</dd>
   * <dd>The </dd>
   * </dl>
   * 
   * @param \com\boxalino\dataintelligence\api\thrift\Authentication $authentication
   * @param \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration
   * @param \com\boxalino\dataintelligence\api\thrift\ProcessTask $processTask
   * @throws \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException
   */
  public function UpdateProcessTask(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, \com\boxalino\dataintelligence\api\thrift\ProcessTask $processTask);
  /**
   * this service function deletes a process task
   * 
   * <dl>
   * <dt>@param authenticationToken</dt>
   * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
   * <dt>@param configurationVersion</dt>
   * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
   * <dt>@param processTaskId</dt>
   * <dd>the process task id to be deleted</dd>
   * <dt>@throws DataIntelligenceServiceException</dt>
   * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
   * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
   * <dd>NON_EXISTING_CONTENT_ID:if the provided process task id doesn't already exists.</dd>
   * </dl>
   * 
   * @param \com\boxalino\dataintelligence\api\thrift\Authentication $authentication
   * @param \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration
   * @param string $processTaskId
   * @throws \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException
   */
  public function DeleteProcessTask(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $processTaskId);
  /**
   * this service function executes a process task
   * 
   * <dl>
   * <dt>@param authenticationToken</dt>
   * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
   * <dt>@param configurationVersion</dt>
   * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
   * <dt>@param processTaskId</dt>
   * <dd>the process task id to be executed</dd>
   * <dt>@throws DataIntelligenceServiceException</dt>
   * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
   * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
   * <dd>NON_EXISTING_CONTENT_ID:if the provided process task id doesn't already exists.</dd>
   * <dt>@return process id</dt>
   * <dd>the processs task execution id of this process task execution (to be used to get an updated status through GetProcessStatus)</dd>
   * </dl>
   * 
   * @param \com\boxalino\dataintelligence\api\thrift\Authentication $authentication
   * @param \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration
   * @param \com\boxalino\dataintelligence\api\thrift\ProcessTaskExecutionParameters $parameters
   * @return string
   * @throws \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException
   */
  public function RunProcessTask(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, \com\boxalino\dataintelligence\api\thrift\ProcessTaskExecutionParameters $parameters);
  /**
   * this service function returns the map of all the defined email campaigns (key = emailCampaignId, value = EmailCampaign object).
   * 
   * <dl>
   * <dt>@param authenticationToken</dt>
   * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
   * <dt>@param configurationVersion</dt>
   * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
   * <dt>@throws DataIntelligenceServiceException</dt>
   * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
   * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
   * <dt>@returns map<string, EmailCampaign></dt>
   * <dd>A map containing all the defined email campaigns of your account in this configuration version, with the emailCampaignId as key and the EmailCampaign object as value (key is provided for accessibility only, as the emailCampaignId is also present in the EmailCampaign object</dd>
   * </dl>
   * 
   * @param \com\boxalino\dataintelligence\api\thrift\Authentication $authentication
   * @param \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration
   * @return array
   * @throws \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException
   */
  public function GetEmailCampaigns(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration);
  /**
   * this service function creates a new email campaign. a campaign is something permanent , so you shouldn't create one for each sending of a newsletter (but instead update the cmpid parameter of a permanent campaign e.g.: 'newsletter')
   * 
   * <dl>
   * <dt>@param authenticationToken</dt>
   * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
   * <dt>@param configurationVersion</dt>
   * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
   * <dt>@param emailCampaignId</dt>
   * <dd>the email campaign id to be created (must follow the content id format: <= 50 alphanumeric characters without accent or punctuation)</dd>
   * <dt>@throws DataIntelligenceServiceException</dt>
   * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
   * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
   * <dd>ALREADY_EXISTING_CONTENT_ID:if the provided email campaign id already exists.</dd>
   * <dd>INVALID_CONTENT_ID:if the provided email campaign id format is not valid.</dd>
   * </dl>
   * 
   * @param \com\boxalino\dataintelligence\api\thrift\Authentication $authentication
   * @param \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration
   * @param string $emailCampaignId
   * @throws \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException
   */
  public function CreateEmailCampaign(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $emailCampaignId);
  /**
   * this service function updates a email campaign
   * 
   * <dl>
   * <dt>@param authenticationToken</dt>
   * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
   * <dt>@param configurationVersion</dt>
   * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
   * <dt>@param emailCampaign</dt>
   * <dd>a EmailCampaign object to be updated (the content of the object will be updated on the content id provided)</dd>
   * <dt>@throws DataIntelligenceServiceException</dt>
   * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
   * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
   * <dd>NON_EXISTING_CONTENT_ID:if the provided email campaign id doesn't already exists.</dd>
   * <dd>INVALID_CONTENT:if the provided email campaign content is not valid.</dd>
   * <dd>The </dd>
   * </dl>
   * 
   * @param \com\boxalino\dataintelligence\api\thrift\Authentication $authentication
   * @param \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration
   * @param \com\boxalino\dataintelligence\api\thrift\EmailCampaign $emailCampaign
   * @throws \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException
   */
  public function UpdateEmailCampaign(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, \com\boxalino\dataintelligence\api\thrift\EmailCampaign $emailCampaign);
  /**
   * this service function deletes a email campaign
   * 
   * <dl>
   * <dt>@param authenticationToken</dt>
   * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
   * <dt>@param configurationVersion</dt>
   * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
   * <dt>@param emailCampaignId</dt>
   * <dd>the email campaign id to be deleted</dd>
   * <dt>@throws DataIntelligenceServiceException</dt>
   * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
   * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
   * <dd>NON_EXISTING_CONTENT_ID:if the provided email campaign id doesn't already exists.</dd>
   * </dl>
   * 
   * @param \com\boxalino\dataintelligence\api\thrift\Authentication $authentication
   * @param \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration
   * @param string $emailCampaignId
   * @throws \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException
   */
  public function DeleteEmailCampaign(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $emailCampaignId);
  /**
   * this service function returns the map of all the defined choices (key = choiceId, value = Choice object).
   * 
   * <dl>
   * <dt>@param authenticationToken</dt>
   * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
   * <dt>@param configurationVersion</dt>
   * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
   * <dt>@param choiceSourceId</dt>
   * <dd>the choice source id (identifying the system being the source of the choices, if you don't have a choice source id already, please contact support@boxalino.com) (must follow the content id format: <= 50 alphanumeric characters without accent or punctuation)</dd>
   * <dt>@throws DataIntelligenceServiceException</dt>
   * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
   * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
   * <dt>@returns map<string, Choice></dt>
   * <dd>A map containing all the defined choices of your account in this configuration version, with the choiceId as key and the Choice object as value (key is provided for accessibility only, as the choiceId is also present in the Choice object</dd>
   * </dl>
   * 
   * @param \com\boxalino\dataintelligence\api\thrift\Authentication $authentication
   * @param \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration
   * @param string $choiceSourceId
   * @return array
   * @throws \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException
   */
  public function GetChoices(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $choiceSourceId);
  /**
   * this service function creates a new choice
   * 
   * <dl>
   * <dt>@param authenticationToken</dt>
   * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
   * <dt>@param configurationVersion</dt>
   * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
   * <dd>the choice source id (identifying the system being the source of the choices, if you don't have a choice source id already, please contact support@boxalino.com) (must follow the content id format: <= 50 alphanumeric characters without accent or punctuation)</dd>
   * <dt>@param choiceId</dt>
   * <dd>the choice id to be created (must follow the content id format: <= 50 alphanumeric characters without accent or punctuation)</dd>
   * <dt>@throws DataIntelligenceServiceException</dt>
   * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
   * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
   * <dd>ALREADY_EXISTING_CONTENT_ID:if the provided choice id already exists.</dd>
   * <dd>INVALID_CONTENT_ID:if the provided choice id format is not valid.</dd>
   * </dl>
   * 
   * @param \com\boxalino\dataintelligence\api\thrift\Authentication $authentication
   * @param \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration
   * @param string $choiceSourceId
   * @param string $choiceId
   * @throws \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException
   */
  public function CreateChoice(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $choiceSourceId, $choiceId);
  /**
   * this service function updates a choice
   * 
   * <dl>
   * <dt>@param authenticationToken</dt>
   * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
   * <dt>@param configurationVersion</dt>
   * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
   * <dd>the choice source id (identifying the system being the source of the choices, if you don't have a choice source id already, please contact support@boxalino.com) (must follow the content id format: <= 50 alphanumeric characters without accent or punctuation)</dd>
   * <dt>@param choice</dt>
   * <dd>a Choice object to be updated (the content of the object will be updated on the content id provided)</dd>
   * <dt>@throws DataIntelligenceServiceException</dt>
   * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
   * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
   * <dd>NON_EXISTING_CONTENT_ID:if the provided choice id doesn't already exists.</dd>
   * <dd>INVALID_CONTENT:if the provided choice content is not valid.</dd>
   * <dd>The </dd>
   * </dl>
   * 
   * @param \com\boxalino\dataintelligence\api\thrift\Authentication $authentication
   * @param \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration
   * @param string $choiceSourceId
   * @param \com\boxalino\dataintelligence\api\thrift\Choice $choice
   * @throws \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException
   */
  public function UpdateChoice(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $choiceSourceId, \com\boxalino\dataintelligence\api\thrift\Choice $choice);
  /**
   * this service function deletes a choice
   * 
   * <dl>
   * <dt>@param authenticationToken</dt>
   * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
   * <dt>@param configurationVersion</dt>
   * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
   * <dd>the choice source id (identifying the system being the source of the choices, if you don't have a choice source id already, please contact support@boxalino.com) (must follow the content id format: <= 50 alphanumeric characters without accent or punctuation)</dd>
   * <dt>@param choiceId</dt>
   * <dd>the choice id to be deleted</dd>
   * <dt>@throws DataIntelligenceServiceException</dt>
   * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
   * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
   * <dd>NON_EXISTING_CONTENT_ID:if the provided choice id doesn't already exists.</dd>
   * </dl>
   * 
   * @param \com\boxalino\dataintelligence\api\thrift\Authentication $authentication
   * @param \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration
   * @param string $choiceSourceId
   * @param string $choiceId
   * @throws \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException
   */
  public function DeleteChoice(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $choiceSourceId, $choiceId);
  /**
   * this service function returns the map of all the defined choices (key = choiceId, value = Choice object).
   * 
   * <dl>
   * <dt>@param authenticationToken</dt>
   * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
   * <dt>@param configurationVersion</dt>
   * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
   * <dd>the choice source id (identifying the system being the source of the choices, if you don't have a choice source id already, please contact support@boxalino.com) (must follow the content id format: <= 50 alphanumeric characters without accent or punctuation)</dd>
   * <dt>@param choiceId</dt>
   * <dd>the choice id on which to get the choice variants from</dd>
   * <dt>@throws DataIntelligenceServiceException</dt>
   * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
   * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
   * <dd>NON_EXISTING_CONTENT_ID:if the provided choice id doesn't already exists.</dd>
   * <dt>@returns map<string, Choice></dt>
   * <dd>A map containing all the defined choice variants of your account in this configuration version and for this specific choice, with the choiceVariantId as key and the ChoiceVariant object as value (key is provided for accessibility only, as the choiceVariantId is also present in the ChoiceVariant object</dd>
   * </dl>
   * 
   * @param \com\boxalino\dataintelligence\api\thrift\Authentication $authentication
   * @param \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration
   * @param string $choiceSourceId
   * @param string $choiceId
   * @return array
   * @throws \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException
   */
  public function GetChoiceVariants(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $choiceSourceId, $choiceId);
  /**
   * this service function creates a new choice
   * 
   * <dl>
   * <dt>@param authenticationToken</dt>
   * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
   * <dt>@param configurationVersion</dt>
   * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
   * <dd>the choice source id (identifying the system being the source of the choices, if you don't have a choice source id already, please contact support@boxalino.com) (must follow the content id format: <= 50 alphanumeric characters without accent or punctuation)</dd>
   * <dt>@param choiceId</dt>
   * <dd>the choice id on which to create a new choice variant (must exists)</dd>
   * <dt>@param choiceVariantId</dt>
   * <dd>the choice variant id to be created (must follow the content id format: <= 50 alphanumeric characters without accent or punctuation)</dd>
   * <dt>@throws DataIntelligenceServiceException</dt>
   * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
   * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
   * <dd>NON_EXISTING_CONTENT_ID:if the provided choice id doesn't already exists.</dd>
   * <dd>ALREADY_EXISTING_CONTENT_ID:if the provided choice variant id already exists.</dd>
   * <dd>INVALID_CONTENT_ID:if the provided choice variant id format is not valid.</dd>
   * </dl>
   * 
   * @param \com\boxalino\dataintelligence\api\thrift\Authentication $authentication
   * @param \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration
   * @param string $choiceSourceId
   * @param string $choiceId
   * @param string $choiceVariantId
   * @throws \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException
   */
  public function CreateChoiceVariant(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $choiceSourceId, $choiceId, $choiceVariantId);
  /**
   * this service function updates a choice
   * 
   * <dl>
   * <dt>@param authenticationToken</dt>
   * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
   * <dt>@param configurationVersion</dt>
   * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
   * <dd>the choice source id (identifying the system being the source of the choices, if you don't have a choice source id already, please contact support@boxalino.com) (must follow the content id format: <= 50 alphanumeric characters without accent or punctuation)</dd>
   * <dt>@param choiceVariant</dt>
   * <dd>a ChoiceVariant object to be updated (the content of the object will be updated on the content id provided)</dd>
   * <dt>@throws DataIntelligenceServiceException</dt>
   * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
   * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
   * <dd>NON_EXISTING_CONTENT_ID:if the provided choice variant id doesn't already exists.</dd>
   * <dd>INVALID_CONTENT:if the provided choice variant content is not valid.</dd>
   * <dd>The </dd>
   * </dl>
   * 
   * @param \com\boxalino\dataintelligence\api\thrift\Authentication $authentication
   * @param \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration
   * @param string $choiceSourceId
   * @param \com\boxalino\dataintelligence\api\thrift\ChoiceVariant $choiceVariant
   * @throws \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException
   */
  public function UpdateChoiceVariant(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $choiceSourceId, \com\boxalino\dataintelligence\api\thrift\ChoiceVariant $choiceVariant);
  /**
   * this service function deletes a choice
   * 
   * <dl>
   * <dt>@param authenticationToken</dt>
   * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
   * <dt>@param configurationVersion</dt>
   * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
   * <dd>the choice source id (identifying the system being the source of the choices, if you don't have a choice source id already, please contact support@boxalino.com) (must follow the content id format: <= 50 alphanumeric characters without accent or punctuation)</dd>
   * <dt>@param choiceId</dt>
   * <dd>the choice id on which to delete the choice variant id</dd>
   * <dt>@param choiceId</dt>
   * <dd>the choice variant id to be deleted</dd>
   * <dt>@throws DataIntelligenceServiceException</dt>
   * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
   * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
   * <dd>NON_EXISTING_CONTENT_ID:if the provided choice or choice variant id doesn't already exists.</dd>
   * </dl>
   * 
   * @param \com\boxalino\dataintelligence\api\thrift\Authentication $authentication
   * @param \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration
   * @param string $choiceSourceId
   * @param string $choiceId
   * @param string $choiceVariantId
   * @throws \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException
   */
  public function DeleteChoiceVariant(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $choiceSourceId, $choiceId, $choiceVariantId);
  /**
   * this service function retrieves a process status
   * 
   * <dl>
   * <dt>@param authenticationToken</dt>
   * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
   * <dt>@param configurationVersion</dt>
   * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
   * <dt>@param processTaskExecutionId</dt>
   * <dd>the process task execution status id to retrieve the status of</dd>
   * <dt>@return process task execution status</dt>
   * <dd>the current status of this process task execution id</dd>
   * </dl>
   * 
   * @param \com\boxalino\dataintelligence\api\thrift\Authentication $authentication
   * @param \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration
   * @param string $processTaskExecutionId
   * @return \com\boxalino\dataintelligence\api\thrift\ProcessTaskExecutionStatus This structure defines a process task execution status (the status of execution of a process task) with its type and a textual message
   * 
   * <dl>
   * <dt>statusType</dt>
   * <dd>the status type of this execution of the process task</dd>
   * <dt>information</dt>
   * <dd>some additonal information about the type (can be empty, used to explain errors and warnings)</dd>
   * </dl>
   * 
   * @throws \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException
   */
  public function GetProcessStatus(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $processTaskExecutionId);
  /**
   * this service retrieves the list of configuration changes between two versions (typically between dev and prod versions)
   * 
   * <dl>
   * <dt>@param authenticationToken</dt>
   * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
   * <dt>@param configurationVersionSource</dt>
   * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion) to be considered as the source (typically the version returned by GetConfigurationVersion with the ConfigurationVersionType CURRENT_DEVELOPMENT_VERSION)</dd>
   * <dt>@param configurationVersionDestination</dt>
   * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion) to be considered as the destination (typically the  version returned by GetConfigurationVersion with the ConfigurationVersionType CURRENT_PRODUCTION_VERSION)</dd>
   * <dt>@throws DataIntelligenceServiceException</dt>
   * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
   * <dd>INVALID_CONFIGURATION_VERSION: if one of provided configuration versions is not valid.</dd>
   * </dl>
   * 
   * @param \com\boxalino\dataintelligence\api\thrift\Authentication $authentication
   * @param \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configurationVersionSource
   * @param \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configurationVersionDestination
   * @return \com\boxalino\dataintelligence\api\thrift\ConfigurationDifference[]
   * @throws \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException
   */
  public function GetConfigurationDifferences(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configurationVersionSource, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configurationVersionDestination);
  /**
   * this service retrieves publishes the provided configuration version. The result is that this configuration will become the CURRENT_PRODUCTION_VERSION version and will be used automatically by all running processes. Also, as a consequence, a copy of the provided configuration version will be done and will become the new CURRENT_DEVELOPMENT_VERSION.
   * 
   * <dl>
   * <dt>@param authenticationToken</dt>
   * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
   * <dt>@param configurationVersion</dt>
   * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
   * <dt>@throws DataIntelligenceServiceException</dt>
   * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
   * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
   * </dl>
   * 
   * @param \com\boxalino\dataintelligence\api\thrift\Authentication $authentication
   * @param \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration
   * @throws \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException
   */
  public function PublishConfiguration(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration);
  /**
   * this service copies the provided configuration version. The result is that this new configuration will become the CURRENT_DEVELOPMENT_VERSION.
   * 
   * <dl>
   * <dt>@param authenticationToken</dt>
   * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
   * <dt>@param configurationVersion</dt>
   * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
   * <dt>@throws DataIntelligenceServiceException</dt>
   * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
   * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
   * </dl>
   * 
   * @param \com\boxalino\dataintelligence\api\thrift\Authentication $authentication
   * @param \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration
   * @throws \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException
   */
  public function CloneConfiguration(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration);
}

class BoxalinoDataIntelligenceClient implements \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligenceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function GetAuthentication(\com\boxalino\dataintelligence\api\thrift\AuthenticationRequest $authentication)
  {
    $this->send_GetAuthentication($authentication);
    return $this->recv_GetAuthentication();
  }

  public function send_GetAuthentication(\com\boxalino\dataintelligence\api\thrift\AuthenticationRequest $authentication)
  {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetAuthentication_args();
    $args->authentication = $authentication;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'GetAuthentication', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('GetAuthentication', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_GetAuthentication()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetAuthentication_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetAuthentication_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    throw new \Exception("GetAuthentication failed: unknown result");
  }

  public function UpdatePassword(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, $newPassword)
  {
    $this->send_UpdatePassword($authentication, $newPassword);
    $this->recv_UpdatePassword();
  }

  public function send_UpdatePassword(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, $newPassword)
  {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_UpdatePassword_args();
    $args->authentication = $authentication;
    $args->newPassword = $newPassword;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'UpdatePassword', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('UpdatePassword', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_UpdatePassword()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_UpdatePassword_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_UpdatePassword_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    return;
  }

  public function GetConfigurationVersion(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, $versionType)
  {
    $this->send_GetConfigurationVersion($authentication, $versionType);
    return $this->recv_GetConfigurationVersion();
  }

  public function send_GetConfigurationVersion(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, $versionType)
  {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetConfigurationVersion_args();
    $args->authentication = $authentication;
    $args->versionType = $versionType;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'GetConfigurationVersion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('GetConfigurationVersion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_GetConfigurationVersion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetConfigurationVersion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetConfigurationVersion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    throw new \Exception("GetConfigurationVersion failed: unknown result");
  }

  public function SetDataSourcesConfiguration(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configurationVersion, $dataSourcesConfigurationXML)
  {
    $this->send_SetDataSourcesConfiguration($authentication, $configurationVersion, $dataSourcesConfigurationXML);
    $this->recv_SetDataSourcesConfiguration();
  }

  public function send_SetDataSourcesConfiguration(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configurationVersion, $dataSourcesConfigurationXML)
  {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_SetDataSourcesConfiguration_args();
    $args->authentication = $authentication;
    $args->configurationVersion = $configurationVersion;
    $args->dataSourcesConfigurationXML = $dataSourcesConfigurationXML;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'SetDataSourcesConfiguration', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('SetDataSourcesConfiguration', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_SetDataSourcesConfiguration()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_SetDataSourcesConfiguration_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_SetDataSourcesConfiguration_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    return;
  }

  public function GetFields(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration)
  {
    $this->send_GetFields($authentication, $configuration);
    return $this->recv_GetFields();
  }

  public function send_GetFields(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration)
  {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetFields_args();
    $args->authentication = $authentication;
    $args->configuration = $configuration;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'GetFields', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('GetFields', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_GetFields()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetFields_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetFields_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    throw new \Exception("GetFields failed: unknown result");
  }

  public function CreateField(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $fieldId)
  {
    $this->send_CreateField($authentication, $configuration, $fieldId);
    $this->recv_CreateField();
  }

  public function send_CreateField(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $fieldId)
  {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_CreateField_args();
    $args->authentication = $authentication;
    $args->configuration = $configuration;
    $args->fieldId = $fieldId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'CreateField', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('CreateField', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_CreateField()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_CreateField_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_CreateField_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    return;
  }

  public function UpdateField(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, \com\boxalino\dataintelligence\api\thrift\Field $field)
  {
    $this->send_UpdateField($authentication, $configuration, $field);
    $this->recv_UpdateField();
  }

  public function send_UpdateField(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, \com\boxalino\dataintelligence\api\thrift\Field $field)
  {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_UpdateField_args();
    $args->authentication = $authentication;
    $args->configuration = $configuration;
    $args->field = $field;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'UpdateField', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('UpdateField', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_UpdateField()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_UpdateField_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_UpdateField_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    return;
  }

  public function DeleteField(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $fieldId)
  {
    $this->send_DeleteField($authentication, $configuration, $fieldId);
    $this->recv_DeleteField();
  }

  public function send_DeleteField(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $fieldId)
  {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_DeleteField_args();
    $args->authentication = $authentication;
    $args->configuration = $configuration;
    $args->fieldId = $fieldId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'DeleteField', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('DeleteField', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_DeleteField()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_DeleteField_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_DeleteField_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    return;
  }

  public function GetProcessTasks(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration)
  {
    $this->send_GetProcessTasks($authentication, $configuration);
    return $this->recv_GetProcessTasks();
  }

  public function send_GetProcessTasks(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration)
  {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetProcessTasks_args();
    $args->authentication = $authentication;
    $args->configuration = $configuration;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'GetProcessTasks', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('GetProcessTasks', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_GetProcessTasks()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetProcessTasks_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetProcessTasks_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    throw new \Exception("GetProcessTasks failed: unknown result");
  }

  public function CreateProcessTask(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $processTaskId)
  {
    $this->send_CreateProcessTask($authentication, $configuration, $processTaskId);
    $this->recv_CreateProcessTask();
  }

  public function send_CreateProcessTask(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $processTaskId)
  {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_CreateProcessTask_args();
    $args->authentication = $authentication;
    $args->configuration = $configuration;
    $args->processTaskId = $processTaskId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'CreateProcessTask', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('CreateProcessTask', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_CreateProcessTask()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_CreateProcessTask_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_CreateProcessTask_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    return;
  }

  public function UpdateProcessTask(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, \com\boxalino\dataintelligence\api\thrift\ProcessTask $processTask)
  {
    $this->send_UpdateProcessTask($authentication, $configuration, $processTask);
    $this->recv_UpdateProcessTask();
  }

  public function send_UpdateProcessTask(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, \com\boxalino\dataintelligence\api\thrift\ProcessTask $processTask)
  {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_UpdateProcessTask_args();
    $args->authentication = $authentication;
    $args->configuration = $configuration;
    $args->processTask = $processTask;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'UpdateProcessTask', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('UpdateProcessTask', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_UpdateProcessTask()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_UpdateProcessTask_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_UpdateProcessTask_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    return;
  }

  public function DeleteProcessTask(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $processTaskId)
  {
    $this->send_DeleteProcessTask($authentication, $configuration, $processTaskId);
    $this->recv_DeleteProcessTask();
  }

  public function send_DeleteProcessTask(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $processTaskId)
  {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_DeleteProcessTask_args();
    $args->authentication = $authentication;
    $args->configuration = $configuration;
    $args->processTaskId = $processTaskId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'DeleteProcessTask', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('DeleteProcessTask', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_DeleteProcessTask()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_DeleteProcessTask_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_DeleteProcessTask_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    return;
  }

  public function RunProcessTask(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, \com\boxalino\dataintelligence\api\thrift\ProcessTaskExecutionParameters $parameters)
  {
    $this->send_RunProcessTask($authentication, $configuration, $parameters);
    return $this->recv_RunProcessTask();
  }

  public function send_RunProcessTask(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, \com\boxalino\dataintelligence\api\thrift\ProcessTaskExecutionParameters $parameters)
  {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_RunProcessTask_args();
    $args->authentication = $authentication;
    $args->configuration = $configuration;
    $args->parameters = $parameters;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'RunProcessTask', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('RunProcessTask', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_RunProcessTask()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_RunProcessTask_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_RunProcessTask_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    throw new \Exception("RunProcessTask failed: unknown result");
  }

  public function GetEmailCampaigns(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration)
  {
    $this->send_GetEmailCampaigns($authentication, $configuration);
    return $this->recv_GetEmailCampaigns();
  }

  public function send_GetEmailCampaigns(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration)
  {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetEmailCampaigns_args();
    $args->authentication = $authentication;
    $args->configuration = $configuration;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'GetEmailCampaigns', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('GetEmailCampaigns', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_GetEmailCampaigns()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetEmailCampaigns_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetEmailCampaigns_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    throw new \Exception("GetEmailCampaigns failed: unknown result");
  }

  public function CreateEmailCampaign(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $emailCampaignId)
  {
    $this->send_CreateEmailCampaign($authentication, $configuration, $emailCampaignId);
    $this->recv_CreateEmailCampaign();
  }

  public function send_CreateEmailCampaign(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $emailCampaignId)
  {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_CreateEmailCampaign_args();
    $args->authentication = $authentication;
    $args->configuration = $configuration;
    $args->emailCampaignId = $emailCampaignId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'CreateEmailCampaign', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('CreateEmailCampaign', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_CreateEmailCampaign()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_CreateEmailCampaign_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_CreateEmailCampaign_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    return;
  }

  public function UpdateEmailCampaign(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, \com\boxalino\dataintelligence\api\thrift\EmailCampaign $emailCampaign)
  {
    $this->send_UpdateEmailCampaign($authentication, $configuration, $emailCampaign);
    $this->recv_UpdateEmailCampaign();
  }

  public function send_UpdateEmailCampaign(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, \com\boxalino\dataintelligence\api\thrift\EmailCampaign $emailCampaign)
  {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_UpdateEmailCampaign_args();
    $args->authentication = $authentication;
    $args->configuration = $configuration;
    $args->emailCampaign = $emailCampaign;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'UpdateEmailCampaign', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('UpdateEmailCampaign', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_UpdateEmailCampaign()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_UpdateEmailCampaign_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_UpdateEmailCampaign_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    return;
  }

  public function DeleteEmailCampaign(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $emailCampaignId)
  {
    $this->send_DeleteEmailCampaign($authentication, $configuration, $emailCampaignId);
    $this->recv_DeleteEmailCampaign();
  }

  public function send_DeleteEmailCampaign(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $emailCampaignId)
  {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_DeleteEmailCampaign_args();
    $args->authentication = $authentication;
    $args->configuration = $configuration;
    $args->emailCampaignId = $emailCampaignId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'DeleteEmailCampaign', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('DeleteEmailCampaign', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_DeleteEmailCampaign()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_DeleteEmailCampaign_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_DeleteEmailCampaign_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    return;
  }

  public function GetChoices(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $choiceSourceId)
  {
    $this->send_GetChoices($authentication, $configuration, $choiceSourceId);
    return $this->recv_GetChoices();
  }

  public function send_GetChoices(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $choiceSourceId)
  {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetChoices_args();
    $args->authentication = $authentication;
    $args->configuration = $configuration;
    $args->choiceSourceId = $choiceSourceId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'GetChoices', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('GetChoices', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_GetChoices()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetChoices_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetChoices_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    throw new \Exception("GetChoices failed: unknown result");
  }

  public function CreateChoice(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $choiceSourceId, $choiceId)
  {
    $this->send_CreateChoice($authentication, $configuration, $choiceSourceId, $choiceId);
    $this->recv_CreateChoice();
  }

  public function send_CreateChoice(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $choiceSourceId, $choiceId)
  {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_CreateChoice_args();
    $args->authentication = $authentication;
    $args->configuration = $configuration;
    $args->choiceSourceId = $choiceSourceId;
    $args->choiceId = $choiceId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'CreateChoice', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('CreateChoice', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_CreateChoice()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_CreateChoice_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_CreateChoice_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    return;
  }

  public function UpdateChoice(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $choiceSourceId, \com\boxalino\dataintelligence\api\thrift\Choice $choice)
  {
    $this->send_UpdateChoice($authentication, $configuration, $choiceSourceId, $choice);
    $this->recv_UpdateChoice();
  }

  public function send_UpdateChoice(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $choiceSourceId, \com\boxalino\dataintelligence\api\thrift\Choice $choice)
  {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_UpdateChoice_args();
    $args->authentication = $authentication;
    $args->configuration = $configuration;
    $args->choiceSourceId = $choiceSourceId;
    $args->choice = $choice;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'UpdateChoice', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('UpdateChoice', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_UpdateChoice()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_UpdateChoice_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_UpdateChoice_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    return;
  }

  public function DeleteChoice(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $choiceSourceId, $choiceId)
  {
    $this->send_DeleteChoice($authentication, $configuration, $choiceSourceId, $choiceId);
    $this->recv_DeleteChoice();
  }

  public function send_DeleteChoice(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $choiceSourceId, $choiceId)
  {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_DeleteChoice_args();
    $args->authentication = $authentication;
    $args->configuration = $configuration;
    $args->choiceSourceId = $choiceSourceId;
    $args->choiceId = $choiceId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'DeleteChoice', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('DeleteChoice', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_DeleteChoice()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_DeleteChoice_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_DeleteChoice_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    return;
  }

  public function GetChoiceVariants(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $choiceSourceId, $choiceId)
  {
    $this->send_GetChoiceVariants($authentication, $configuration, $choiceSourceId, $choiceId);
    return $this->recv_GetChoiceVariants();
  }

  public function send_GetChoiceVariants(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $choiceSourceId, $choiceId)
  {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetChoiceVariants_args();
    $args->authentication = $authentication;
    $args->configuration = $configuration;
    $args->choiceSourceId = $choiceSourceId;
    $args->choiceId = $choiceId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'GetChoiceVariants', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('GetChoiceVariants', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_GetChoiceVariants()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetChoiceVariants_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetChoiceVariants_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    throw new \Exception("GetChoiceVariants failed: unknown result");
  }

  public function CreateChoiceVariant(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $choiceSourceId, $choiceId, $choiceVariantId)
  {
    $this->send_CreateChoiceVariant($authentication, $configuration, $choiceSourceId, $choiceId, $choiceVariantId);
    $this->recv_CreateChoiceVariant();
  }

  public function send_CreateChoiceVariant(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $choiceSourceId, $choiceId, $choiceVariantId)
  {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_CreateChoiceVariant_args();
    $args->authentication = $authentication;
    $args->configuration = $configuration;
    $args->choiceSourceId = $choiceSourceId;
    $args->choiceId = $choiceId;
    $args->choiceVariantId = $choiceVariantId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'CreateChoiceVariant', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('CreateChoiceVariant', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_CreateChoiceVariant()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_CreateChoiceVariant_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_CreateChoiceVariant_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    return;
  }

  public function UpdateChoiceVariant(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $choiceSourceId, \com\boxalino\dataintelligence\api\thrift\ChoiceVariant $choiceVariant)
  {
    $this->send_UpdateChoiceVariant($authentication, $configuration, $choiceSourceId, $choiceVariant);
    $this->recv_UpdateChoiceVariant();
  }

  public function send_UpdateChoiceVariant(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $choiceSourceId, \com\boxalino\dataintelligence\api\thrift\ChoiceVariant $choiceVariant)
  {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_UpdateChoiceVariant_args();
    $args->authentication = $authentication;
    $args->configuration = $configuration;
    $args->choiceSourceId = $choiceSourceId;
    $args->choiceVariant = $choiceVariant;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'UpdateChoiceVariant', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('UpdateChoiceVariant', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_UpdateChoiceVariant()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_UpdateChoiceVariant_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_UpdateChoiceVariant_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    return;
  }

  public function DeleteChoiceVariant(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $choiceSourceId, $choiceId, $choiceVariantId)
  {
    $this->send_DeleteChoiceVariant($authentication, $configuration, $choiceSourceId, $choiceId, $choiceVariantId);
    $this->recv_DeleteChoiceVariant();
  }

  public function send_DeleteChoiceVariant(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $choiceSourceId, $choiceId, $choiceVariantId)
  {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_DeleteChoiceVariant_args();
    $args->authentication = $authentication;
    $args->configuration = $configuration;
    $args->choiceSourceId = $choiceSourceId;
    $args->choiceId = $choiceId;
    $args->choiceVariantId = $choiceVariantId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'DeleteChoiceVariant', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('DeleteChoiceVariant', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_DeleteChoiceVariant()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_DeleteChoiceVariant_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_DeleteChoiceVariant_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    return;
  }

  public function GetProcessStatus(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $processTaskExecutionId)
  {
    $this->send_GetProcessStatus($authentication, $configuration, $processTaskExecutionId);
    return $this->recv_GetProcessStatus();
  }

  public function send_GetProcessStatus(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration, $processTaskExecutionId)
  {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetProcessStatus_args();
    $args->authentication = $authentication;
    $args->configuration = $configuration;
    $args->processTaskExecutionId = $processTaskExecutionId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'GetProcessStatus', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('GetProcessStatus', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_GetProcessStatus()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetProcessStatus_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetProcessStatus_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    throw new \Exception("GetProcessStatus failed: unknown result");
  }

  public function GetConfigurationDifferences(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configurationVersionSource, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configurationVersionDestination)
  {
    $this->send_GetConfigurationDifferences($authentication, $configurationVersionSource, $configurationVersionDestination);
    return $this->recv_GetConfigurationDifferences();
  }

  public function send_GetConfigurationDifferences(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configurationVersionSource, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configurationVersionDestination)
  {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetConfigurationDifferences_args();
    $args->authentication = $authentication;
    $args->configurationVersionSource = $configurationVersionSource;
    $args->configurationVersionDestination = $configurationVersionDestination;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'GetConfigurationDifferences', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('GetConfigurationDifferences', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_GetConfigurationDifferences()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetConfigurationDifferences_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_GetConfigurationDifferences_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    throw new \Exception("GetConfigurationDifferences failed: unknown result");
  }

  public function PublishConfiguration(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration)
  {
    $this->send_PublishConfiguration($authentication, $configuration);
    $this->recv_PublishConfiguration();
  }

  public function send_PublishConfiguration(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration)
  {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_PublishConfiguration_args();
    $args->authentication = $authentication;
    $args->configuration = $configuration;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'PublishConfiguration', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('PublishConfiguration', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_PublishConfiguration()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_PublishConfiguration_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_PublishConfiguration_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    return;
  }

  public function CloneConfiguration(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration)
  {
    $this->send_CloneConfiguration($authentication, $configuration);
    $this->recv_CloneConfiguration();
  }

  public function send_CloneConfiguration(\com\boxalino\dataintelligence\api\thrift\Authentication $authentication, \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion $configuration)
  {
    $args = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_CloneConfiguration_args();
    $args->authentication = $authentication;
    $args->configuration = $configuration;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'CloneConfiguration', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('CloneConfiguration', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_CloneConfiguration()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_CloneConfiguration_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \com\boxalino\dataintelligence\api\thrift\BoxalinoDataIntelligence_CloneConfiguration_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->e !== null) {
      throw $result->e;
    }
    return;
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class BoxalinoDataIntelligence_GetAuthentication_args {
  static $_TSPEC;

  /**
   * @var \com\boxalino\dataintelligence\api\thrift\AuthenticationRequest
   */
  public $authentication = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authentication',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\AuthenticationRequest',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authentication'])) {
        $this->authentication = $vals['authentication'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_GetAuthentication_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authentication = new \com\boxalino\dataintelligence\api\thrift\AuthenticationRequest();
            $xfer += $this->authentication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_GetAuthentication_args');
    if ($this->authentication !== null) {
      if (!is_object($this->authentication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authentication', TType::STRUCT, 1);
      $xfer += $this->authentication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_GetAuthentication_result {
  static $_TSPEC;

  /**
   * @var \com\boxalino\dataintelligence\api\thrift\Authentication
   */
  public $success = null;
  /**
   * @var \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Authentication',
          ),
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_GetAuthentication_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \com\boxalino\dataintelligence\api\thrift\Authentication();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_GetAuthentication_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_UpdatePassword_args {
  static $_TSPEC;

  /**
   * @var \com\boxalino\dataintelligence\api\thrift\Authentication
   */
  public $authentication = null;
  /**
   * @var string
   */
  public $newPassword = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authentication',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Authentication',
          ),
        2 => array(
          'var' => 'newPassword',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authentication'])) {
        $this->authentication = $vals['authentication'];
      }
      if (isset($vals['newPassword'])) {
        $this->newPassword = $vals['newPassword'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_UpdatePassword_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authentication = new \com\boxalino\dataintelligence\api\thrift\Authentication();
            $xfer += $this->authentication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->newPassword);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_UpdatePassword_args');
    if ($this->authentication !== null) {
      if (!is_object($this->authentication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authentication', TType::STRUCT, 1);
      $xfer += $this->authentication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->newPassword !== null) {
      $xfer += $output->writeFieldBegin('newPassword', TType::STRING, 2);
      $xfer += $output->writeString($this->newPassword);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_UpdatePassword_result {
  static $_TSPEC;

  /**
   * @var \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_UpdatePassword_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_UpdatePassword_result');
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_GetConfigurationVersion_args {
  static $_TSPEC;

  /**
   * @var \com\boxalino\dataintelligence\api\thrift\Authentication
   */
  public $authentication = null;
  /**
   * @var int
   */
  public $versionType = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authentication',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Authentication',
          ),
        2 => array(
          'var' => 'versionType',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authentication'])) {
        $this->authentication = $vals['authentication'];
      }
      if (isset($vals['versionType'])) {
        $this->versionType = $vals['versionType'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_GetConfigurationVersion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authentication = new \com\boxalino\dataintelligence\api\thrift\Authentication();
            $xfer += $this->authentication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->versionType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_GetConfigurationVersion_args');
    if ($this->authentication !== null) {
      if (!is_object($this->authentication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authentication', TType::STRUCT, 1);
      $xfer += $this->authentication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->versionType !== null) {
      $xfer += $output->writeFieldBegin('versionType', TType::I32, 2);
      $xfer += $output->writeI32($this->versionType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_GetConfigurationVersion_result {
  static $_TSPEC;

  /**
   * @var \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion
   */
  public $success = null;
  /**
   * @var \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ConfigurationVersion',
          ),
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_GetConfigurationVersion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_GetConfigurationVersion_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_SetDataSourcesConfiguration_args {
  static $_TSPEC;

  /**
   * @var \com\boxalino\dataintelligence\api\thrift\Authentication
   */
  public $authentication = null;
  /**
   * @var \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion
   */
  public $configurationVersion = null;
  /**
   * @var string
   */
  public $dataSourcesConfigurationXML = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authentication',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Authentication',
          ),
        2 => array(
          'var' => 'configurationVersion',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ConfigurationVersion',
          ),
        3 => array(
          'var' => 'dataSourcesConfigurationXML',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authentication'])) {
        $this->authentication = $vals['authentication'];
      }
      if (isset($vals['configurationVersion'])) {
        $this->configurationVersion = $vals['configurationVersion'];
      }
      if (isset($vals['dataSourcesConfigurationXML'])) {
        $this->dataSourcesConfigurationXML = $vals['dataSourcesConfigurationXML'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_SetDataSourcesConfiguration_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authentication = new \com\boxalino\dataintelligence\api\thrift\Authentication();
            $xfer += $this->authentication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->configurationVersion = new \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion();
            $xfer += $this->configurationVersion->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->dataSourcesConfigurationXML);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_SetDataSourcesConfiguration_args');
    if ($this->authentication !== null) {
      if (!is_object($this->authentication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authentication', TType::STRUCT, 1);
      $xfer += $this->authentication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->configurationVersion !== null) {
      if (!is_object($this->configurationVersion)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('configurationVersion', TType::STRUCT, 2);
      $xfer += $this->configurationVersion->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dataSourcesConfigurationXML !== null) {
      $xfer += $output->writeFieldBegin('dataSourcesConfigurationXML', TType::STRING, 3);
      $xfer += $output->writeString($this->dataSourcesConfigurationXML);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_SetDataSourcesConfiguration_result {
  static $_TSPEC;

  /**
   * @var \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_SetDataSourcesConfiguration_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_SetDataSourcesConfiguration_result');
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_GetFields_args {
  static $_TSPEC;

  /**
   * @var \com\boxalino\dataintelligence\api\thrift\Authentication
   */
  public $authentication = null;
  /**
   * @var \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion
   */
  public $configuration = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authentication',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Authentication',
          ),
        2 => array(
          'var' => 'configuration',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ConfigurationVersion',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authentication'])) {
        $this->authentication = $vals['authentication'];
      }
      if (isset($vals['configuration'])) {
        $this->configuration = $vals['configuration'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_GetFields_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authentication = new \com\boxalino\dataintelligence\api\thrift\Authentication();
            $xfer += $this->authentication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->configuration = new \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion();
            $xfer += $this->configuration->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_GetFields_args');
    if ($this->authentication !== null) {
      if (!is_object($this->authentication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authentication', TType::STRUCT, 1);
      $xfer += $this->authentication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->configuration !== null) {
      if (!is_object($this->configuration)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('configuration', TType::STRUCT, 2);
      $xfer += $this->configuration->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_GetFields_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\com\boxalino\dataintelligence\api\thrift\Field',
            ),
          ),
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_GetFields_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size84 = 0;
            $_ktype85 = 0;
            $_vtype86 = 0;
            $xfer += $input->readMapBegin($_ktype85, $_vtype86, $_size84);
            for ($_i88 = 0; $_i88 < $_size84; ++$_i88)
            {
              $key89 = '';
              $val90 = new \com\boxalino\dataintelligence\api\thrift\Field();
              $xfer += $input->readString($key89);
              $val90 = new \com\boxalino\dataintelligence\api\thrift\Field();
              $xfer += $val90->read($input);
              $this->success[$key89] = $val90;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_GetFields_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $kiter91 => $viter92)
          {
            $xfer += $output->writeString($kiter91);
            $xfer += $viter92->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_CreateField_args {
  static $_TSPEC;

  /**
   * @var \com\boxalino\dataintelligence\api\thrift\Authentication
   */
  public $authentication = null;
  /**
   * @var \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion
   */
  public $configuration = null;
  /**
   * @var string
   */
  public $fieldId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authentication',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Authentication',
          ),
        2 => array(
          'var' => 'configuration',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ConfigurationVersion',
          ),
        3 => array(
          'var' => 'fieldId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authentication'])) {
        $this->authentication = $vals['authentication'];
      }
      if (isset($vals['configuration'])) {
        $this->configuration = $vals['configuration'];
      }
      if (isset($vals['fieldId'])) {
        $this->fieldId = $vals['fieldId'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_CreateField_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authentication = new \com\boxalino\dataintelligence\api\thrift\Authentication();
            $xfer += $this->authentication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->configuration = new \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion();
            $xfer += $this->configuration->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fieldId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_CreateField_args');
    if ($this->authentication !== null) {
      if (!is_object($this->authentication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authentication', TType::STRUCT, 1);
      $xfer += $this->authentication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->configuration !== null) {
      if (!is_object($this->configuration)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('configuration', TType::STRUCT, 2);
      $xfer += $this->configuration->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fieldId !== null) {
      $xfer += $output->writeFieldBegin('fieldId', TType::STRING, 3);
      $xfer += $output->writeString($this->fieldId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_CreateField_result {
  static $_TSPEC;

  /**
   * @var \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_CreateField_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_CreateField_result');
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_UpdateField_args {
  static $_TSPEC;

  /**
   * @var \com\boxalino\dataintelligence\api\thrift\Authentication
   */
  public $authentication = null;
  /**
   * @var \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion
   */
  public $configuration = null;
  /**
   * @var \com\boxalino\dataintelligence\api\thrift\Field
   */
  public $field = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authentication',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Authentication',
          ),
        2 => array(
          'var' => 'configuration',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ConfigurationVersion',
          ),
        3 => array(
          'var' => 'field',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Field',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authentication'])) {
        $this->authentication = $vals['authentication'];
      }
      if (isset($vals['configuration'])) {
        $this->configuration = $vals['configuration'];
      }
      if (isset($vals['field'])) {
        $this->field = $vals['field'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_UpdateField_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authentication = new \com\boxalino\dataintelligence\api\thrift\Authentication();
            $xfer += $this->authentication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->configuration = new \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion();
            $xfer += $this->configuration->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->field = new \com\boxalino\dataintelligence\api\thrift\Field();
            $xfer += $this->field->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_UpdateField_args');
    if ($this->authentication !== null) {
      if (!is_object($this->authentication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authentication', TType::STRUCT, 1);
      $xfer += $this->authentication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->configuration !== null) {
      if (!is_object($this->configuration)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('configuration', TType::STRUCT, 2);
      $xfer += $this->configuration->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->field !== null) {
      if (!is_object($this->field)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('field', TType::STRUCT, 3);
      $xfer += $this->field->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_UpdateField_result {
  static $_TSPEC;

  /**
   * @var \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_UpdateField_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_UpdateField_result');
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_DeleteField_args {
  static $_TSPEC;

  /**
   * @var \com\boxalino\dataintelligence\api\thrift\Authentication
   */
  public $authentication = null;
  /**
   * @var \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion
   */
  public $configuration = null;
  /**
   * @var string
   */
  public $fieldId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authentication',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Authentication',
          ),
        2 => array(
          'var' => 'configuration',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ConfigurationVersion',
          ),
        3 => array(
          'var' => 'fieldId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authentication'])) {
        $this->authentication = $vals['authentication'];
      }
      if (isset($vals['configuration'])) {
        $this->configuration = $vals['configuration'];
      }
      if (isset($vals['fieldId'])) {
        $this->fieldId = $vals['fieldId'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_DeleteField_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authentication = new \com\boxalino\dataintelligence\api\thrift\Authentication();
            $xfer += $this->authentication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->configuration = new \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion();
            $xfer += $this->configuration->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fieldId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_DeleteField_args');
    if ($this->authentication !== null) {
      if (!is_object($this->authentication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authentication', TType::STRUCT, 1);
      $xfer += $this->authentication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->configuration !== null) {
      if (!is_object($this->configuration)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('configuration', TType::STRUCT, 2);
      $xfer += $this->configuration->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fieldId !== null) {
      $xfer += $output->writeFieldBegin('fieldId', TType::STRING, 3);
      $xfer += $output->writeString($this->fieldId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_DeleteField_result {
  static $_TSPEC;

  /**
   * @var \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_DeleteField_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_DeleteField_result');
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_GetProcessTasks_args {
  static $_TSPEC;

  /**
   * @var \com\boxalino\dataintelligence\api\thrift\Authentication
   */
  public $authentication = null;
  /**
   * @var \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion
   */
  public $configuration = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authentication',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Authentication',
          ),
        2 => array(
          'var' => 'configuration',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ConfigurationVersion',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authentication'])) {
        $this->authentication = $vals['authentication'];
      }
      if (isset($vals['configuration'])) {
        $this->configuration = $vals['configuration'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_GetProcessTasks_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authentication = new \com\boxalino\dataintelligence\api\thrift\Authentication();
            $xfer += $this->authentication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->configuration = new \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion();
            $xfer += $this->configuration->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_GetProcessTasks_args');
    if ($this->authentication !== null) {
      if (!is_object($this->authentication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authentication', TType::STRUCT, 1);
      $xfer += $this->authentication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->configuration !== null) {
      if (!is_object($this->configuration)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('configuration', TType::STRUCT, 2);
      $xfer += $this->configuration->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_GetProcessTasks_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\com\boxalino\dataintelligence\api\thrift\ProcessTask',
            ),
          ),
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_GetProcessTasks_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size93 = 0;
            $_ktype94 = 0;
            $_vtype95 = 0;
            $xfer += $input->readMapBegin($_ktype94, $_vtype95, $_size93);
            for ($_i97 = 0; $_i97 < $_size93; ++$_i97)
            {
              $key98 = '';
              $val99 = new \com\boxalino\dataintelligence\api\thrift\ProcessTask();
              $xfer += $input->readString($key98);
              $val99 = new \com\boxalino\dataintelligence\api\thrift\ProcessTask();
              $xfer += $val99->read($input);
              $this->success[$key98] = $val99;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_GetProcessTasks_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $kiter100 => $viter101)
          {
            $xfer += $output->writeString($kiter100);
            $xfer += $viter101->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_CreateProcessTask_args {
  static $_TSPEC;

  /**
   * @var \com\boxalino\dataintelligence\api\thrift\Authentication
   */
  public $authentication = null;
  /**
   * @var \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion
   */
  public $configuration = null;
  /**
   * @var string
   */
  public $processTaskId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authentication',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Authentication',
          ),
        2 => array(
          'var' => 'configuration',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ConfigurationVersion',
          ),
        3 => array(
          'var' => 'processTaskId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authentication'])) {
        $this->authentication = $vals['authentication'];
      }
      if (isset($vals['configuration'])) {
        $this->configuration = $vals['configuration'];
      }
      if (isset($vals['processTaskId'])) {
        $this->processTaskId = $vals['processTaskId'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_CreateProcessTask_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authentication = new \com\boxalino\dataintelligence\api\thrift\Authentication();
            $xfer += $this->authentication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->configuration = new \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion();
            $xfer += $this->configuration->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->processTaskId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_CreateProcessTask_args');
    if ($this->authentication !== null) {
      if (!is_object($this->authentication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authentication', TType::STRUCT, 1);
      $xfer += $this->authentication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->configuration !== null) {
      if (!is_object($this->configuration)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('configuration', TType::STRUCT, 2);
      $xfer += $this->configuration->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->processTaskId !== null) {
      $xfer += $output->writeFieldBegin('processTaskId', TType::STRING, 3);
      $xfer += $output->writeString($this->processTaskId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_CreateProcessTask_result {
  static $_TSPEC;

  /**
   * @var \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_CreateProcessTask_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_CreateProcessTask_result');
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_UpdateProcessTask_args {
  static $_TSPEC;

  /**
   * @var \com\boxalino\dataintelligence\api\thrift\Authentication
   */
  public $authentication = null;
  /**
   * @var \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion
   */
  public $configuration = null;
  /**
   * @var \com\boxalino\dataintelligence\api\thrift\ProcessTask
   */
  public $processTask = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authentication',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Authentication',
          ),
        2 => array(
          'var' => 'configuration',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ConfigurationVersion',
          ),
        3 => array(
          'var' => 'processTask',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ProcessTask',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authentication'])) {
        $this->authentication = $vals['authentication'];
      }
      if (isset($vals['configuration'])) {
        $this->configuration = $vals['configuration'];
      }
      if (isset($vals['processTask'])) {
        $this->processTask = $vals['processTask'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_UpdateProcessTask_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authentication = new \com\boxalino\dataintelligence\api\thrift\Authentication();
            $xfer += $this->authentication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->configuration = new \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion();
            $xfer += $this->configuration->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->processTask = new \com\boxalino\dataintelligence\api\thrift\ProcessTask();
            $xfer += $this->processTask->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_UpdateProcessTask_args');
    if ($this->authentication !== null) {
      if (!is_object($this->authentication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authentication', TType::STRUCT, 1);
      $xfer += $this->authentication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->configuration !== null) {
      if (!is_object($this->configuration)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('configuration', TType::STRUCT, 2);
      $xfer += $this->configuration->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->processTask !== null) {
      if (!is_object($this->processTask)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('processTask', TType::STRUCT, 3);
      $xfer += $this->processTask->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_UpdateProcessTask_result {
  static $_TSPEC;

  /**
   * @var \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_UpdateProcessTask_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_UpdateProcessTask_result');
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_DeleteProcessTask_args {
  static $_TSPEC;

  /**
   * @var \com\boxalino\dataintelligence\api\thrift\Authentication
   */
  public $authentication = null;
  /**
   * @var \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion
   */
  public $configuration = null;
  /**
   * @var string
   */
  public $processTaskId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authentication',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Authentication',
          ),
        2 => array(
          'var' => 'configuration',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ConfigurationVersion',
          ),
        3 => array(
          'var' => 'processTaskId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authentication'])) {
        $this->authentication = $vals['authentication'];
      }
      if (isset($vals['configuration'])) {
        $this->configuration = $vals['configuration'];
      }
      if (isset($vals['processTaskId'])) {
        $this->processTaskId = $vals['processTaskId'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_DeleteProcessTask_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authentication = new \com\boxalino\dataintelligence\api\thrift\Authentication();
            $xfer += $this->authentication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->configuration = new \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion();
            $xfer += $this->configuration->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->processTaskId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_DeleteProcessTask_args');
    if ($this->authentication !== null) {
      if (!is_object($this->authentication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authentication', TType::STRUCT, 1);
      $xfer += $this->authentication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->configuration !== null) {
      if (!is_object($this->configuration)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('configuration', TType::STRUCT, 2);
      $xfer += $this->configuration->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->processTaskId !== null) {
      $xfer += $output->writeFieldBegin('processTaskId', TType::STRING, 3);
      $xfer += $output->writeString($this->processTaskId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_DeleteProcessTask_result {
  static $_TSPEC;

  /**
   * @var \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_DeleteProcessTask_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_DeleteProcessTask_result');
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_RunProcessTask_args {
  static $_TSPEC;

  /**
   * @var \com\boxalino\dataintelligence\api\thrift\Authentication
   */
  public $authentication = null;
  /**
   * @var \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion
   */
  public $configuration = null;
  /**
   * @var \com\boxalino\dataintelligence\api\thrift\ProcessTaskExecutionParameters
   */
  public $parameters = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authentication',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Authentication',
          ),
        2 => array(
          'var' => 'configuration',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ConfigurationVersion',
          ),
        3 => array(
          'var' => 'parameters',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ProcessTaskExecutionParameters',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authentication'])) {
        $this->authentication = $vals['authentication'];
      }
      if (isset($vals['configuration'])) {
        $this->configuration = $vals['configuration'];
      }
      if (isset($vals['parameters'])) {
        $this->parameters = $vals['parameters'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_RunProcessTask_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authentication = new \com\boxalino\dataintelligence\api\thrift\Authentication();
            $xfer += $this->authentication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->configuration = new \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion();
            $xfer += $this->configuration->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->parameters = new \com\boxalino\dataintelligence\api\thrift\ProcessTaskExecutionParameters();
            $xfer += $this->parameters->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_RunProcessTask_args');
    if ($this->authentication !== null) {
      if (!is_object($this->authentication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authentication', TType::STRUCT, 1);
      $xfer += $this->authentication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->configuration !== null) {
      if (!is_object($this->configuration)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('configuration', TType::STRUCT, 2);
      $xfer += $this->configuration->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parameters !== null) {
      if (!is_object($this->parameters)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('parameters', TType::STRUCT, 3);
      $xfer += $this->parameters->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_RunProcessTask_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;
  /**
   * @var \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_RunProcessTask_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_RunProcessTask_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_GetEmailCampaigns_args {
  static $_TSPEC;

  /**
   * @var \com\boxalino\dataintelligence\api\thrift\Authentication
   */
  public $authentication = null;
  /**
   * @var \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion
   */
  public $configuration = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authentication',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Authentication',
          ),
        2 => array(
          'var' => 'configuration',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ConfigurationVersion',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authentication'])) {
        $this->authentication = $vals['authentication'];
      }
      if (isset($vals['configuration'])) {
        $this->configuration = $vals['configuration'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_GetEmailCampaigns_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authentication = new \com\boxalino\dataintelligence\api\thrift\Authentication();
            $xfer += $this->authentication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->configuration = new \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion();
            $xfer += $this->configuration->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_GetEmailCampaigns_args');
    if ($this->authentication !== null) {
      if (!is_object($this->authentication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authentication', TType::STRUCT, 1);
      $xfer += $this->authentication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->configuration !== null) {
      if (!is_object($this->configuration)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('configuration', TType::STRUCT, 2);
      $xfer += $this->configuration->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_GetEmailCampaigns_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\com\boxalino\dataintelligence\api\thrift\EmailCampaign',
            ),
          ),
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_GetEmailCampaigns_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size102 = 0;
            $_ktype103 = 0;
            $_vtype104 = 0;
            $xfer += $input->readMapBegin($_ktype103, $_vtype104, $_size102);
            for ($_i106 = 0; $_i106 < $_size102; ++$_i106)
            {
              $key107 = '';
              $val108 = new \com\boxalino\dataintelligence\api\thrift\EmailCampaign();
              $xfer += $input->readString($key107);
              $val108 = new \com\boxalino\dataintelligence\api\thrift\EmailCampaign();
              $xfer += $val108->read($input);
              $this->success[$key107] = $val108;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_GetEmailCampaigns_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $kiter109 => $viter110)
          {
            $xfer += $output->writeString($kiter109);
            $xfer += $viter110->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_CreateEmailCampaign_args {
  static $_TSPEC;

  /**
   * @var \com\boxalino\dataintelligence\api\thrift\Authentication
   */
  public $authentication = null;
  /**
   * @var \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion
   */
  public $configuration = null;
  /**
   * @var string
   */
  public $emailCampaignId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authentication',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Authentication',
          ),
        2 => array(
          'var' => 'configuration',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ConfigurationVersion',
          ),
        3 => array(
          'var' => 'emailCampaignId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authentication'])) {
        $this->authentication = $vals['authentication'];
      }
      if (isset($vals['configuration'])) {
        $this->configuration = $vals['configuration'];
      }
      if (isset($vals['emailCampaignId'])) {
        $this->emailCampaignId = $vals['emailCampaignId'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_CreateEmailCampaign_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authentication = new \com\boxalino\dataintelligence\api\thrift\Authentication();
            $xfer += $this->authentication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->configuration = new \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion();
            $xfer += $this->configuration->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->emailCampaignId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_CreateEmailCampaign_args');
    if ($this->authentication !== null) {
      if (!is_object($this->authentication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authentication', TType::STRUCT, 1);
      $xfer += $this->authentication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->configuration !== null) {
      if (!is_object($this->configuration)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('configuration', TType::STRUCT, 2);
      $xfer += $this->configuration->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->emailCampaignId !== null) {
      $xfer += $output->writeFieldBegin('emailCampaignId', TType::STRING, 3);
      $xfer += $output->writeString($this->emailCampaignId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_CreateEmailCampaign_result {
  static $_TSPEC;

  /**
   * @var \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_CreateEmailCampaign_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_CreateEmailCampaign_result');
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_UpdateEmailCampaign_args {
  static $_TSPEC;

  /**
   * @var \com\boxalino\dataintelligence\api\thrift\Authentication
   */
  public $authentication = null;
  /**
   * @var \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion
   */
  public $configuration = null;
  /**
   * @var \com\boxalino\dataintelligence\api\thrift\EmailCampaign
   */
  public $emailCampaign = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authentication',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Authentication',
          ),
        2 => array(
          'var' => 'configuration',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ConfigurationVersion',
          ),
        3 => array(
          'var' => 'emailCampaign',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\EmailCampaign',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authentication'])) {
        $this->authentication = $vals['authentication'];
      }
      if (isset($vals['configuration'])) {
        $this->configuration = $vals['configuration'];
      }
      if (isset($vals['emailCampaign'])) {
        $this->emailCampaign = $vals['emailCampaign'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_UpdateEmailCampaign_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authentication = new \com\boxalino\dataintelligence\api\thrift\Authentication();
            $xfer += $this->authentication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->configuration = new \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion();
            $xfer += $this->configuration->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->emailCampaign = new \com\boxalino\dataintelligence\api\thrift\EmailCampaign();
            $xfer += $this->emailCampaign->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_UpdateEmailCampaign_args');
    if ($this->authentication !== null) {
      if (!is_object($this->authentication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authentication', TType::STRUCT, 1);
      $xfer += $this->authentication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->configuration !== null) {
      if (!is_object($this->configuration)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('configuration', TType::STRUCT, 2);
      $xfer += $this->configuration->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->emailCampaign !== null) {
      if (!is_object($this->emailCampaign)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('emailCampaign', TType::STRUCT, 3);
      $xfer += $this->emailCampaign->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_UpdateEmailCampaign_result {
  static $_TSPEC;

  /**
   * @var \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_UpdateEmailCampaign_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_UpdateEmailCampaign_result');
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_DeleteEmailCampaign_args {
  static $_TSPEC;

  /**
   * @var \com\boxalino\dataintelligence\api\thrift\Authentication
   */
  public $authentication = null;
  /**
   * @var \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion
   */
  public $configuration = null;
  /**
   * @var string
   */
  public $emailCampaignId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authentication',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Authentication',
          ),
        2 => array(
          'var' => 'configuration',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ConfigurationVersion',
          ),
        3 => array(
          'var' => 'emailCampaignId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authentication'])) {
        $this->authentication = $vals['authentication'];
      }
      if (isset($vals['configuration'])) {
        $this->configuration = $vals['configuration'];
      }
      if (isset($vals['emailCampaignId'])) {
        $this->emailCampaignId = $vals['emailCampaignId'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_DeleteEmailCampaign_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authentication = new \com\boxalino\dataintelligence\api\thrift\Authentication();
            $xfer += $this->authentication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->configuration = new \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion();
            $xfer += $this->configuration->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->emailCampaignId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_DeleteEmailCampaign_args');
    if ($this->authentication !== null) {
      if (!is_object($this->authentication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authentication', TType::STRUCT, 1);
      $xfer += $this->authentication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->configuration !== null) {
      if (!is_object($this->configuration)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('configuration', TType::STRUCT, 2);
      $xfer += $this->configuration->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->emailCampaignId !== null) {
      $xfer += $output->writeFieldBegin('emailCampaignId', TType::STRING, 3);
      $xfer += $output->writeString($this->emailCampaignId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_DeleteEmailCampaign_result {
  static $_TSPEC;

  /**
   * @var \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_DeleteEmailCampaign_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_DeleteEmailCampaign_result');
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_GetChoices_args {
  static $_TSPEC;

  /**
   * @var \com\boxalino\dataintelligence\api\thrift\Authentication
   */
  public $authentication = null;
  /**
   * @var \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion
   */
  public $configuration = null;
  /**
   * @var string
   */
  public $choiceSourceId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authentication',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Authentication',
          ),
        2 => array(
          'var' => 'configuration',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ConfigurationVersion',
          ),
        3 => array(
          'var' => 'choiceSourceId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authentication'])) {
        $this->authentication = $vals['authentication'];
      }
      if (isset($vals['configuration'])) {
        $this->configuration = $vals['configuration'];
      }
      if (isset($vals['choiceSourceId'])) {
        $this->choiceSourceId = $vals['choiceSourceId'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_GetChoices_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authentication = new \com\boxalino\dataintelligence\api\thrift\Authentication();
            $xfer += $this->authentication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->configuration = new \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion();
            $xfer += $this->configuration->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->choiceSourceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_GetChoices_args');
    if ($this->authentication !== null) {
      if (!is_object($this->authentication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authentication', TType::STRUCT, 1);
      $xfer += $this->authentication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->configuration !== null) {
      if (!is_object($this->configuration)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('configuration', TType::STRUCT, 2);
      $xfer += $this->configuration->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->choiceSourceId !== null) {
      $xfer += $output->writeFieldBegin('choiceSourceId', TType::STRING, 3);
      $xfer += $output->writeString($this->choiceSourceId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_GetChoices_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\com\boxalino\dataintelligence\api\thrift\Choice',
            ),
          ),
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_GetChoices_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size111 = 0;
            $_ktype112 = 0;
            $_vtype113 = 0;
            $xfer += $input->readMapBegin($_ktype112, $_vtype113, $_size111);
            for ($_i115 = 0; $_i115 < $_size111; ++$_i115)
            {
              $key116 = '';
              $val117 = new \com\boxalino\dataintelligence\api\thrift\Choice();
              $xfer += $input->readString($key116);
              $val117 = new \com\boxalino\dataintelligence\api\thrift\Choice();
              $xfer += $val117->read($input);
              $this->success[$key116] = $val117;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_GetChoices_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $kiter118 => $viter119)
          {
            $xfer += $output->writeString($kiter118);
            $xfer += $viter119->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_CreateChoice_args {
  static $_TSPEC;

  /**
   * @var \com\boxalino\dataintelligence\api\thrift\Authentication
   */
  public $authentication = null;
  /**
   * @var \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion
   */
  public $configuration = null;
  /**
   * @var string
   */
  public $choiceSourceId = null;
  /**
   * @var string
   */
  public $choiceId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authentication',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Authentication',
          ),
        2 => array(
          'var' => 'configuration',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ConfigurationVersion',
          ),
        3 => array(
          'var' => 'choiceSourceId',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'choiceId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authentication'])) {
        $this->authentication = $vals['authentication'];
      }
      if (isset($vals['configuration'])) {
        $this->configuration = $vals['configuration'];
      }
      if (isset($vals['choiceSourceId'])) {
        $this->choiceSourceId = $vals['choiceSourceId'];
      }
      if (isset($vals['choiceId'])) {
        $this->choiceId = $vals['choiceId'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_CreateChoice_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authentication = new \com\boxalino\dataintelligence\api\thrift\Authentication();
            $xfer += $this->authentication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->configuration = new \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion();
            $xfer += $this->configuration->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->choiceSourceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->choiceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_CreateChoice_args');
    if ($this->authentication !== null) {
      if (!is_object($this->authentication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authentication', TType::STRUCT, 1);
      $xfer += $this->authentication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->configuration !== null) {
      if (!is_object($this->configuration)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('configuration', TType::STRUCT, 2);
      $xfer += $this->configuration->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->choiceSourceId !== null) {
      $xfer += $output->writeFieldBegin('choiceSourceId', TType::STRING, 3);
      $xfer += $output->writeString($this->choiceSourceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->choiceId !== null) {
      $xfer += $output->writeFieldBegin('choiceId', TType::STRING, 4);
      $xfer += $output->writeString($this->choiceId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_CreateChoice_result {
  static $_TSPEC;

  /**
   * @var \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_CreateChoice_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_CreateChoice_result');
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_UpdateChoice_args {
  static $_TSPEC;

  /**
   * @var \com\boxalino\dataintelligence\api\thrift\Authentication
   */
  public $authentication = null;
  /**
   * @var \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion
   */
  public $configuration = null;
  /**
   * @var string
   */
  public $choiceSourceId = null;
  /**
   * @var \com\boxalino\dataintelligence\api\thrift\Choice
   */
  public $choice = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authentication',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Authentication',
          ),
        2 => array(
          'var' => 'configuration',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ConfigurationVersion',
          ),
        3 => array(
          'var' => 'choiceSourceId',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'choice',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Choice',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authentication'])) {
        $this->authentication = $vals['authentication'];
      }
      if (isset($vals['configuration'])) {
        $this->configuration = $vals['configuration'];
      }
      if (isset($vals['choiceSourceId'])) {
        $this->choiceSourceId = $vals['choiceSourceId'];
      }
      if (isset($vals['choice'])) {
        $this->choice = $vals['choice'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_UpdateChoice_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authentication = new \com\boxalino\dataintelligence\api\thrift\Authentication();
            $xfer += $this->authentication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->configuration = new \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion();
            $xfer += $this->configuration->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->choiceSourceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->choice = new \com\boxalino\dataintelligence\api\thrift\Choice();
            $xfer += $this->choice->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_UpdateChoice_args');
    if ($this->authentication !== null) {
      if (!is_object($this->authentication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authentication', TType::STRUCT, 1);
      $xfer += $this->authentication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->configuration !== null) {
      if (!is_object($this->configuration)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('configuration', TType::STRUCT, 2);
      $xfer += $this->configuration->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->choiceSourceId !== null) {
      $xfer += $output->writeFieldBegin('choiceSourceId', TType::STRING, 3);
      $xfer += $output->writeString($this->choiceSourceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->choice !== null) {
      if (!is_object($this->choice)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('choice', TType::STRUCT, 4);
      $xfer += $this->choice->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_UpdateChoice_result {
  static $_TSPEC;

  /**
   * @var \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_UpdateChoice_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_UpdateChoice_result');
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_DeleteChoice_args {
  static $_TSPEC;

  /**
   * @var \com\boxalino\dataintelligence\api\thrift\Authentication
   */
  public $authentication = null;
  /**
   * @var \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion
   */
  public $configuration = null;
  /**
   * @var string
   */
  public $choiceSourceId = null;
  /**
   * @var string
   */
  public $choiceId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authentication',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Authentication',
          ),
        2 => array(
          'var' => 'configuration',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ConfigurationVersion',
          ),
        3 => array(
          'var' => 'choiceSourceId',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'choiceId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authentication'])) {
        $this->authentication = $vals['authentication'];
      }
      if (isset($vals['configuration'])) {
        $this->configuration = $vals['configuration'];
      }
      if (isset($vals['choiceSourceId'])) {
        $this->choiceSourceId = $vals['choiceSourceId'];
      }
      if (isset($vals['choiceId'])) {
        $this->choiceId = $vals['choiceId'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_DeleteChoice_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authentication = new \com\boxalino\dataintelligence\api\thrift\Authentication();
            $xfer += $this->authentication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->configuration = new \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion();
            $xfer += $this->configuration->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->choiceSourceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->choiceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_DeleteChoice_args');
    if ($this->authentication !== null) {
      if (!is_object($this->authentication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authentication', TType::STRUCT, 1);
      $xfer += $this->authentication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->configuration !== null) {
      if (!is_object($this->configuration)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('configuration', TType::STRUCT, 2);
      $xfer += $this->configuration->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->choiceSourceId !== null) {
      $xfer += $output->writeFieldBegin('choiceSourceId', TType::STRING, 3);
      $xfer += $output->writeString($this->choiceSourceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->choiceId !== null) {
      $xfer += $output->writeFieldBegin('choiceId', TType::STRING, 4);
      $xfer += $output->writeString($this->choiceId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_DeleteChoice_result {
  static $_TSPEC;

  /**
   * @var \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_DeleteChoice_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_DeleteChoice_result');
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_GetChoiceVariants_args {
  static $_TSPEC;

  /**
   * @var \com\boxalino\dataintelligence\api\thrift\Authentication
   */
  public $authentication = null;
  /**
   * @var \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion
   */
  public $configuration = null;
  /**
   * @var string
   */
  public $choiceSourceId = null;
  /**
   * @var string
   */
  public $choiceId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authentication',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Authentication',
          ),
        2 => array(
          'var' => 'configuration',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ConfigurationVersion',
          ),
        3 => array(
          'var' => 'choiceSourceId',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'choiceId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authentication'])) {
        $this->authentication = $vals['authentication'];
      }
      if (isset($vals['configuration'])) {
        $this->configuration = $vals['configuration'];
      }
      if (isset($vals['choiceSourceId'])) {
        $this->choiceSourceId = $vals['choiceSourceId'];
      }
      if (isset($vals['choiceId'])) {
        $this->choiceId = $vals['choiceId'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_GetChoiceVariants_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authentication = new \com\boxalino\dataintelligence\api\thrift\Authentication();
            $xfer += $this->authentication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->configuration = new \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion();
            $xfer += $this->configuration->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->choiceSourceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->choiceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_GetChoiceVariants_args');
    if ($this->authentication !== null) {
      if (!is_object($this->authentication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authentication', TType::STRUCT, 1);
      $xfer += $this->authentication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->configuration !== null) {
      if (!is_object($this->configuration)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('configuration', TType::STRUCT, 2);
      $xfer += $this->configuration->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->choiceSourceId !== null) {
      $xfer += $output->writeFieldBegin('choiceSourceId', TType::STRING, 3);
      $xfer += $output->writeString($this->choiceSourceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->choiceId !== null) {
      $xfer += $output->writeFieldBegin('choiceId', TType::STRING, 4);
      $xfer += $output->writeString($this->choiceId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_GetChoiceVariants_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\com\boxalino\dataintelligence\api\thrift\ChoiceVariant',
            ),
          ),
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_GetChoiceVariants_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size120 = 0;
            $_ktype121 = 0;
            $_vtype122 = 0;
            $xfer += $input->readMapBegin($_ktype121, $_vtype122, $_size120);
            for ($_i124 = 0; $_i124 < $_size120; ++$_i124)
            {
              $key125 = '';
              $val126 = new \com\boxalino\dataintelligence\api\thrift\ChoiceVariant();
              $xfer += $input->readString($key125);
              $val126 = new \com\boxalino\dataintelligence\api\thrift\ChoiceVariant();
              $xfer += $val126->read($input);
              $this->success[$key125] = $val126;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_GetChoiceVariants_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $kiter127 => $viter128)
          {
            $xfer += $output->writeString($kiter127);
            $xfer += $viter128->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_CreateChoiceVariant_args {
  static $_TSPEC;

  /**
   * @var \com\boxalino\dataintelligence\api\thrift\Authentication
   */
  public $authentication = null;
  /**
   * @var \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion
   */
  public $configuration = null;
  /**
   * @var string
   */
  public $choiceSourceId = null;
  /**
   * @var string
   */
  public $choiceId = null;
  /**
   * @var string
   */
  public $choiceVariantId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authentication',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Authentication',
          ),
        2 => array(
          'var' => 'configuration',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ConfigurationVersion',
          ),
        3 => array(
          'var' => 'choiceSourceId',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'choiceId',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'choiceVariantId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authentication'])) {
        $this->authentication = $vals['authentication'];
      }
      if (isset($vals['configuration'])) {
        $this->configuration = $vals['configuration'];
      }
      if (isset($vals['choiceSourceId'])) {
        $this->choiceSourceId = $vals['choiceSourceId'];
      }
      if (isset($vals['choiceId'])) {
        $this->choiceId = $vals['choiceId'];
      }
      if (isset($vals['choiceVariantId'])) {
        $this->choiceVariantId = $vals['choiceVariantId'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_CreateChoiceVariant_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authentication = new \com\boxalino\dataintelligence\api\thrift\Authentication();
            $xfer += $this->authentication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->configuration = new \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion();
            $xfer += $this->configuration->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->choiceSourceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->choiceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->choiceVariantId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_CreateChoiceVariant_args');
    if ($this->authentication !== null) {
      if (!is_object($this->authentication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authentication', TType::STRUCT, 1);
      $xfer += $this->authentication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->configuration !== null) {
      if (!is_object($this->configuration)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('configuration', TType::STRUCT, 2);
      $xfer += $this->configuration->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->choiceSourceId !== null) {
      $xfer += $output->writeFieldBegin('choiceSourceId', TType::STRING, 3);
      $xfer += $output->writeString($this->choiceSourceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->choiceId !== null) {
      $xfer += $output->writeFieldBegin('choiceId', TType::STRING, 4);
      $xfer += $output->writeString($this->choiceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->choiceVariantId !== null) {
      $xfer += $output->writeFieldBegin('choiceVariantId', TType::STRING, 5);
      $xfer += $output->writeString($this->choiceVariantId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_CreateChoiceVariant_result {
  static $_TSPEC;

  /**
   * @var \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_CreateChoiceVariant_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_CreateChoiceVariant_result');
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_UpdateChoiceVariant_args {
  static $_TSPEC;

  /**
   * @var \com\boxalino\dataintelligence\api\thrift\Authentication
   */
  public $authentication = null;
  /**
   * @var \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion
   */
  public $configuration = null;
  /**
   * @var string
   */
  public $choiceSourceId = null;
  /**
   * @var \com\boxalino\dataintelligence\api\thrift\ChoiceVariant
   */
  public $choiceVariant = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authentication',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Authentication',
          ),
        2 => array(
          'var' => 'configuration',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ConfigurationVersion',
          ),
        3 => array(
          'var' => 'choiceSourceId',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'choiceVariant',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ChoiceVariant',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authentication'])) {
        $this->authentication = $vals['authentication'];
      }
      if (isset($vals['configuration'])) {
        $this->configuration = $vals['configuration'];
      }
      if (isset($vals['choiceSourceId'])) {
        $this->choiceSourceId = $vals['choiceSourceId'];
      }
      if (isset($vals['choiceVariant'])) {
        $this->choiceVariant = $vals['choiceVariant'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_UpdateChoiceVariant_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authentication = new \com\boxalino\dataintelligence\api\thrift\Authentication();
            $xfer += $this->authentication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->configuration = new \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion();
            $xfer += $this->configuration->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->choiceSourceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->choiceVariant = new \com\boxalino\dataintelligence\api\thrift\ChoiceVariant();
            $xfer += $this->choiceVariant->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_UpdateChoiceVariant_args');
    if ($this->authentication !== null) {
      if (!is_object($this->authentication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authentication', TType::STRUCT, 1);
      $xfer += $this->authentication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->configuration !== null) {
      if (!is_object($this->configuration)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('configuration', TType::STRUCT, 2);
      $xfer += $this->configuration->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->choiceSourceId !== null) {
      $xfer += $output->writeFieldBegin('choiceSourceId', TType::STRING, 3);
      $xfer += $output->writeString($this->choiceSourceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->choiceVariant !== null) {
      if (!is_object($this->choiceVariant)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('choiceVariant', TType::STRUCT, 4);
      $xfer += $this->choiceVariant->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_UpdateChoiceVariant_result {
  static $_TSPEC;

  /**
   * @var \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_UpdateChoiceVariant_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_UpdateChoiceVariant_result');
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_DeleteChoiceVariant_args {
  static $_TSPEC;

  /**
   * @var \com\boxalino\dataintelligence\api\thrift\Authentication
   */
  public $authentication = null;
  /**
   * @var \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion
   */
  public $configuration = null;
  /**
   * @var string
   */
  public $choiceSourceId = null;
  /**
   * @var string
   */
  public $choiceId = null;
  /**
   * @var string
   */
  public $choiceVariantId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authentication',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Authentication',
          ),
        2 => array(
          'var' => 'configuration',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ConfigurationVersion',
          ),
        3 => array(
          'var' => 'choiceSourceId',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'choiceId',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'choiceVariantId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authentication'])) {
        $this->authentication = $vals['authentication'];
      }
      if (isset($vals['configuration'])) {
        $this->configuration = $vals['configuration'];
      }
      if (isset($vals['choiceSourceId'])) {
        $this->choiceSourceId = $vals['choiceSourceId'];
      }
      if (isset($vals['choiceId'])) {
        $this->choiceId = $vals['choiceId'];
      }
      if (isset($vals['choiceVariantId'])) {
        $this->choiceVariantId = $vals['choiceVariantId'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_DeleteChoiceVariant_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authentication = new \com\boxalino\dataintelligence\api\thrift\Authentication();
            $xfer += $this->authentication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->configuration = new \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion();
            $xfer += $this->configuration->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->choiceSourceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->choiceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->choiceVariantId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_DeleteChoiceVariant_args');
    if ($this->authentication !== null) {
      if (!is_object($this->authentication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authentication', TType::STRUCT, 1);
      $xfer += $this->authentication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->configuration !== null) {
      if (!is_object($this->configuration)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('configuration', TType::STRUCT, 2);
      $xfer += $this->configuration->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->choiceSourceId !== null) {
      $xfer += $output->writeFieldBegin('choiceSourceId', TType::STRING, 3);
      $xfer += $output->writeString($this->choiceSourceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->choiceId !== null) {
      $xfer += $output->writeFieldBegin('choiceId', TType::STRING, 4);
      $xfer += $output->writeString($this->choiceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->choiceVariantId !== null) {
      $xfer += $output->writeFieldBegin('choiceVariantId', TType::STRING, 5);
      $xfer += $output->writeString($this->choiceVariantId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_DeleteChoiceVariant_result {
  static $_TSPEC;

  /**
   * @var \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_DeleteChoiceVariant_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_DeleteChoiceVariant_result');
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_GetProcessStatus_args {
  static $_TSPEC;

  /**
   * @var \com\boxalino\dataintelligence\api\thrift\Authentication
   */
  public $authentication = null;
  /**
   * @var \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion
   */
  public $configuration = null;
  /**
   * @var string
   */
  public $processTaskExecutionId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authentication',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Authentication',
          ),
        2 => array(
          'var' => 'configuration',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ConfigurationVersion',
          ),
        3 => array(
          'var' => 'processTaskExecutionId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authentication'])) {
        $this->authentication = $vals['authentication'];
      }
      if (isset($vals['configuration'])) {
        $this->configuration = $vals['configuration'];
      }
      if (isset($vals['processTaskExecutionId'])) {
        $this->processTaskExecutionId = $vals['processTaskExecutionId'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_GetProcessStatus_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authentication = new \com\boxalino\dataintelligence\api\thrift\Authentication();
            $xfer += $this->authentication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->configuration = new \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion();
            $xfer += $this->configuration->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->processTaskExecutionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_GetProcessStatus_args');
    if ($this->authentication !== null) {
      if (!is_object($this->authentication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authentication', TType::STRUCT, 1);
      $xfer += $this->authentication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->configuration !== null) {
      if (!is_object($this->configuration)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('configuration', TType::STRUCT, 2);
      $xfer += $this->configuration->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->processTaskExecutionId !== null) {
      $xfer += $output->writeFieldBegin('processTaskExecutionId', TType::STRING, 3);
      $xfer += $output->writeString($this->processTaskExecutionId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_GetProcessStatus_result {
  static $_TSPEC;

  /**
   * @var \com\boxalino\dataintelligence\api\thrift\ProcessTaskExecutionStatus
   */
  public $success = null;
  /**
   * @var \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ProcessTaskExecutionStatus',
          ),
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_GetProcessStatus_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \com\boxalino\dataintelligence\api\thrift\ProcessTaskExecutionStatus();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_GetProcessStatus_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_GetConfigurationDifferences_args {
  static $_TSPEC;

  /**
   * @var \com\boxalino\dataintelligence\api\thrift\Authentication
   */
  public $authentication = null;
  /**
   * @var \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion
   */
  public $configurationVersionSource = null;
  /**
   * @var \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion
   */
  public $configurationVersionDestination = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authentication',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Authentication',
          ),
        2 => array(
          'var' => 'configurationVersionSource',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ConfigurationVersion',
          ),
        3 => array(
          'var' => 'configurationVersionDestination',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ConfigurationVersion',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authentication'])) {
        $this->authentication = $vals['authentication'];
      }
      if (isset($vals['configurationVersionSource'])) {
        $this->configurationVersionSource = $vals['configurationVersionSource'];
      }
      if (isset($vals['configurationVersionDestination'])) {
        $this->configurationVersionDestination = $vals['configurationVersionDestination'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_GetConfigurationDifferences_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authentication = new \com\boxalino\dataintelligence\api\thrift\Authentication();
            $xfer += $this->authentication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->configurationVersionSource = new \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion();
            $xfer += $this->configurationVersionSource->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->configurationVersionDestination = new \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion();
            $xfer += $this->configurationVersionDestination->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_GetConfigurationDifferences_args');
    if ($this->authentication !== null) {
      if (!is_object($this->authentication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authentication', TType::STRUCT, 1);
      $xfer += $this->authentication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->configurationVersionSource !== null) {
      if (!is_object($this->configurationVersionSource)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('configurationVersionSource', TType::STRUCT, 2);
      $xfer += $this->configurationVersionSource->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->configurationVersionDestination !== null) {
      if (!is_object($this->configurationVersionDestination)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('configurationVersionDestination', TType::STRUCT, 3);
      $xfer += $this->configurationVersionDestination->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_GetConfigurationDifferences_result {
  static $_TSPEC;

  /**
   * @var \com\boxalino\dataintelligence\api\thrift\ConfigurationDifference[]
   */
  public $success = null;
  /**
   * @var \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\com\boxalino\dataintelligence\api\thrift\ConfigurationDifference',
            ),
          ),
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_GetConfigurationDifferences_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size129 = 0;
            $_etype132 = 0;
            $xfer += $input->readListBegin($_etype132, $_size129);
            for ($_i133 = 0; $_i133 < $_size129; ++$_i133)
            {
              $elem134 = null;
              $elem134 = new \com\boxalino\dataintelligence\api\thrift\ConfigurationDifference();
              $xfer += $elem134->read($input);
              $this->success []= $elem134;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_GetConfigurationDifferences_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter135)
          {
            $xfer += $iter135->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_PublishConfiguration_args {
  static $_TSPEC;

  /**
   * @var \com\boxalino\dataintelligence\api\thrift\Authentication
   */
  public $authentication = null;
  /**
   * @var \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion
   */
  public $configuration = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authentication',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Authentication',
          ),
        2 => array(
          'var' => 'configuration',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ConfigurationVersion',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authentication'])) {
        $this->authentication = $vals['authentication'];
      }
      if (isset($vals['configuration'])) {
        $this->configuration = $vals['configuration'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_PublishConfiguration_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authentication = new \com\boxalino\dataintelligence\api\thrift\Authentication();
            $xfer += $this->authentication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->configuration = new \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion();
            $xfer += $this->configuration->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_PublishConfiguration_args');
    if ($this->authentication !== null) {
      if (!is_object($this->authentication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authentication', TType::STRUCT, 1);
      $xfer += $this->authentication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->configuration !== null) {
      if (!is_object($this->configuration)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('configuration', TType::STRUCT, 2);
      $xfer += $this->configuration->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_PublishConfiguration_result {
  static $_TSPEC;

  /**
   * @var \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_PublishConfiguration_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_PublishConfiguration_result');
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_CloneConfiguration_args {
  static $_TSPEC;

  /**
   * @var \com\boxalino\dataintelligence\api\thrift\Authentication
   */
  public $authentication = null;
  /**
   * @var \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion
   */
  public $configuration = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authentication',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\Authentication',
          ),
        2 => array(
          'var' => 'configuration',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\ConfigurationVersion',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authentication'])) {
        $this->authentication = $vals['authentication'];
      }
      if (isset($vals['configuration'])) {
        $this->configuration = $vals['configuration'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_CloneConfiguration_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->authentication = new \com\boxalino\dataintelligence\api\thrift\Authentication();
            $xfer += $this->authentication->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->configuration = new \com\boxalino\dataintelligence\api\thrift\ConfigurationVersion();
            $xfer += $this->configuration->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_CloneConfiguration_args');
    if ($this->authentication !== null) {
      if (!is_object($this->authentication)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('authentication', TType::STRUCT, 1);
      $xfer += $this->authentication->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->configuration !== null) {
      if (!is_object($this->configuration)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('configuration', TType::STRUCT, 2);
      $xfer += $this->configuration->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxalinoDataIntelligence_CloneConfiguration_result {
  static $_TSPEC;

  /**
   * @var \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException
   */
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'e',
          'type' => TType::STRUCT,
          'class' => '\com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'BoxalinoDataIntelligence_CloneConfiguration_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->e = new \com\boxalino\dataintelligence\api\thrift\DataIntelligenceServiceException();
            $xfer += $this->e->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxalinoDataIntelligence_CloneConfiguration_result');
    if ($this->e !== null) {
      $xfer += $output->writeFieldBegin('e', TType::STRUCT, 1);
      $xfer += $this->e->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


